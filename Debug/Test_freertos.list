
Test_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c00  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08005d10  08005d10  00015d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e30  08005e30  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005e30  08005e30  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e30  08005e30  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013cc  20000060  08005e98  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  08005e98  0002142c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015f54  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003133  00000000  00000000  00036020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00039158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff9  00000000  00000000  0003a5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a59b  00000000  00000000  0003b5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017cde  00000000  00000000  00055b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a60d  00000000  00000000  0006d822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b60  00000000  00000000  00107e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  0010d990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cf8 	.word	0x08005cf8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005cf8 	.word	0x08005cf8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000007c 	.word	0x2000007c
 800018c:	2000011c 	.word	0x2000011c

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b090      	sub	sp, #64	; 0x40
 8000194:	af00      	add	r7, sp, #0
  for (volatile int i = 0; i < 2000000; i++); //delay to allow the status register of imu to setup after power
 8000196:	2300      	movs	r3, #0
 8000198:	607b      	str	r3, [r7, #4]
 800019a:	e002      	b.n	80001a2 <main+0x12>
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	3301      	adds	r3, #1
 80001a0:	607b      	str	r3, [r7, #4]
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	4a1b      	ldr	r2, [pc, #108]	; (8000214 <main+0x84>)
 80001a6:	4293      	cmp	r3, r2
 80001a8:	ddf8      	ble.n	800019c <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001aa:	f000 fcf9 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ae:	f000 f83b 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b2:	f000 f92b 	bl	800040c <MX_GPIO_Init>
  MX_ADC1_Init();
 80001b6:	f000 f893 	bl	80002e0 <MX_ADC1_Init>
  MX_I2C2_Init();
 80001ba:	f000 f8cf 	bl	800035c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80001be:	f000 f8fb 	bl	80003b8 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of BNO055_task */
  osThreadDef(BNO055_task, StartBNO, osPriorityNormal, 0, 128);
 80001c2:	4b15      	ldr	r3, [pc, #84]	; (8000218 <main+0x88>)
 80001c4:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80001c8:	461d      	mov	r5, r3
 80001ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BNO055_taskHandle = osThreadCreate(osThread(BNO055_task), NULL);
 80001d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80001da:	2100      	movs	r1, #0
 80001dc:	4618      	mov	r0, r3
 80001de:	f003 fe45 	bl	8003e6c <osThreadCreate>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <main+0x8c>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* definition and creation of IR_task */
  osThreadDef(IR_task, StartIR, osPriorityIdle, 0, 128);
 80001e8:	4b0d      	ldr	r3, [pc, #52]	; (8000220 <main+0x90>)
 80001ea:	f107 0408 	add.w	r4, r7, #8
 80001ee:	461d      	mov	r5, r3
 80001f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IR_taskHandle = osThreadCreate(osThread(IR_task), NULL);
 80001fc:	f107 0308 	add.w	r3, r7, #8
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f003 fe32 	bl	8003e6c <osThreadCreate>
 8000208:	4603      	mov	r3, r0
 800020a:	4a06      	ldr	r2, [pc, #24]	; (8000224 <main+0x94>)
 800020c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800020e:	f003 fe26 	bl	8003e5e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000212:	e7fe      	b.n	8000212 <main+0x82>
 8000214:	001e847f 	.word	0x001e847f
 8000218:	08005d1c 	.word	0x08005d1c
 800021c:	20000538 	.word	0x20000538
 8000220:	08005d40 	.word	0x08005d40
 8000224:	2000053c 	.word	0x2000053c

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b094      	sub	sp, #80	; 0x50
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f005 f866 	bl	8005308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fbc8 	bl	8002a14 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800028a:	f000 fa9f 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fe34 	bl	8002f18 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002b6:	f000 fa89 	bl	80007cc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002ba:	2302      	movs	r3, #2
 80002bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002c2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 ffe4 	bl	8003294 <HAL_RCCEx_PeriphCLKConfig>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002d2:	f000 fa7b 	bl	80007cc <Error_Handler>
  }
}
 80002d6:	bf00      	nop
 80002d8:	3750      	adds	r7, #80	; 0x50
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
	...

080002e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002f0:	4b18      	ldr	r3, [pc, #96]	; (8000354 <MX_ADC1_Init+0x74>)
 80002f2:	4a19      	ldr	r2, [pc, #100]	; (8000358 <MX_ADC1_Init+0x78>)
 80002f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f6:	4b17      	ldr	r3, [pc, #92]	; (8000354 <MX_ADC1_Init+0x74>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <MX_ADC1_Init+0x74>)
 80002fe:	2200      	movs	r2, #0
 8000300:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000302:	4b14      	ldr	r3, [pc, #80]	; (8000354 <MX_ADC1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <MX_ADC1_Init+0x74>)
 800030a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000310:	4b10      	ldr	r3, [pc, #64]	; (8000354 <MX_ADC1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <MX_ADC1_Init+0x74>)
 8000318:	2201      	movs	r2, #1
 800031a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031c:	480d      	ldr	r0, [pc, #52]	; (8000354 <MX_ADC1_Init+0x74>)
 800031e:	f000 fc71 	bl	8000c04 <HAL_ADC_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000328:	f000 fa50 	bl	80007cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800032c:	2303      	movs	r3, #3
 800032e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000330:	2301      	movs	r3, #1
 8000332:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	4619      	mov	r1, r3
 800033c:	4805      	ldr	r0, [pc, #20]	; (8000354 <MX_ADC1_Init+0x74>)
 800033e:	f000 ff25 	bl	800118c <HAL_ADC_ConfigChannel>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000348:	f000 fa40 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	2000046c 	.word	0x2000046c
 8000358:	40012400 	.word	0x40012400

0800035c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000360:	4b12      	ldr	r3, [pc, #72]	; (80003ac <MX_I2C2_Init+0x50>)
 8000362:	4a13      	ldr	r2, [pc, #76]	; (80003b0 <MX_I2C2_Init+0x54>)
 8000364:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <MX_I2C2_Init+0x50>)
 8000368:	4a12      	ldr	r2, [pc, #72]	; (80003b4 <MX_I2C2_Init+0x58>)
 800036a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800036c:	4b0f      	ldr	r3, [pc, #60]	; (80003ac <MX_I2C2_Init+0x50>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_I2C2_Init+0x50>)
 8000374:	2200      	movs	r2, #0
 8000376:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <MX_I2C2_Init+0x50>)
 800037a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800037e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000380:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <MX_I2C2_Init+0x50>)
 8000382:	2200      	movs	r2, #0
 8000384:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000386:	4b09      	ldr	r3, [pc, #36]	; (80003ac <MX_I2C2_Init+0x50>)
 8000388:	2200      	movs	r2, #0
 800038a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <MX_I2C2_Init+0x50>)
 800038e:	2200      	movs	r2, #0
 8000390:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <MX_I2C2_Init+0x50>)
 8000394:	2200      	movs	r2, #0
 8000396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000398:	4804      	ldr	r0, [pc, #16]	; (80003ac <MX_I2C2_Init+0x50>)
 800039a:	f001 fb07 	bl	80019ac <HAL_I2C_Init>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80003a4:	f000 fa12 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	2000049c 	.word	0x2000049c
 80003b0:	40005800 	.word	0x40005800
 80003b4:	000186a0 	.word	0x000186a0

080003b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003f0:	f003 fafa 	bl	80039e8 <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fa:	f000 f9e7 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200004f0 	.word	0x200004f0
 8000408:	40013800 	.word	0x40013800

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000420:	4b24      	ldr	r3, [pc, #144]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a23      	ldr	r2, [pc, #140]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000426:	f043 0310 	orr.w	r3, r3, #16
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b21      	ldr	r3, [pc, #132]	; (80004b4 <MX_GPIO_Init+0xa8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0310 	and.w	r3, r3, #16
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <MX_GPIO_Init+0xa8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <MX_GPIO_Init+0xa8>)
 800043e:	f043 0320 	orr.w	r3, r3, #32
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0320 	and.w	r3, r3, #32
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a17      	ldr	r2, [pc, #92]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_GPIO_Init+0xa8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000468:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <MX_GPIO_Init+0xa8>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a11      	ldr	r2, [pc, #68]	; (80004b4 <MX_GPIO_Init+0xa8>)
 800046e:	f043 0308 	orr.w	r3, r3, #8
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <MX_GPIO_Init+0xa8>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0308 	and.w	r3, r3, #8
 800047c:	603b      	str	r3, [r7, #0]
 800047e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000486:	480c      	ldr	r0, [pc, #48]	; (80004b8 <MX_GPIO_Init+0xac>)
 8000488:	f001 fa78 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800048c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	2301      	movs	r3, #1
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049a:	2303      	movs	r3, #3
 800049c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800049e:	f107 0310 	add.w	r3, r7, #16
 80004a2:	4619      	mov	r1, r3
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <MX_GPIO_Init+0xac>)
 80004a6:	f001 f8e5 	bl	8001674 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004aa:	bf00      	nop
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40011000 	.word	0x40011000

080004bc <i2c_write>:

void i2c_write(uint8_t device_address, uint8_t memory, uint8_t data) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b086      	sub	sp, #24
 80004c0:	af02      	add	r7, sp, #8
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
 80004c6:	460b      	mov	r3, r1
 80004c8:	71bb      	strb	r3, [r7, #6]
 80004ca:	4613      	mov	r3, r2
 80004cc:	717b      	strb	r3, [r7, #5]
    // Send a single byte (data) to a specific register (memory) on the IMU
    uint8_t payload[2] = {memory, data};
 80004ce:	79bb      	ldrb	r3, [r7, #6]
 80004d0:	733b      	strb	r3, [r7, #12]
 80004d2:	797b      	ldrb	r3, [r7, #5]
 80004d4:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c2, device_address, payload, 2, HAL_MAX_DELAY);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	b299      	uxth	r1, r3
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	f04f 33ff 	mov.w	r3, #4294967295
 80004e2:	9300      	str	r3, [sp, #0]
 80004e4:	2302      	movs	r3, #2
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <i2c_write+0x38>)
 80004e8:	f001 fba4 	bl	8001c34 <HAL_I2C_Master_Transmit>
}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000049c 	.word	0x2000049c

080004f8 <i2c_read>:

void i2c_read(uint8_t device_address, uint8_t memory, uint8_t* buffer, uint16_t length) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	603a      	str	r2, [r7, #0]
 8000500:	461a      	mov	r2, r3
 8000502:	4603      	mov	r3, r0
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	460b      	mov	r3, r1
 8000508:	71bb      	strb	r3, [r7, #6]
 800050a:	4613      	mov	r3, r2
 800050c:	80bb      	strh	r3, [r7, #4]
    // Write the register address, then read the data
    HAL_I2C_Master_Transmit(&hi2c2, device_address, &memory, 1, HAL_MAX_DELAY);
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	b299      	uxth	r1, r3
 8000512:	1dba      	adds	r2, r7, #6
 8000514:	f04f 33ff 	mov.w	r3, #4294967295
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2301      	movs	r3, #1
 800051c:	4808      	ldr	r0, [pc, #32]	; (8000540 <i2c_read+0x48>)
 800051e:	f001 fb89 	bl	8001c34 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c2, device_address, buffer, length, HAL_MAX_DELAY);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	b299      	uxth	r1, r3
 8000526:	88bb      	ldrh	r3, [r7, #4]
 8000528:	f04f 32ff 	mov.w	r2, #4294967295
 800052c:	9200      	str	r2, [sp, #0]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	4803      	ldr	r0, [pc, #12]	; (8000540 <i2c_read+0x48>)
 8000532:	f001 fc7d 	bl	8001e30 <HAL_I2C_Master_Receive>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	2000049c 	.word	0x2000049c

08000544 <calc>:

void calc(uint8_t *data, int16_t *LinACCp_X, int16_t *LinACCp_Y, int16_t *LinACCp_Z) {
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	603b      	str	r3, [r7, #0]
    *LinACCp_X = (((int16_t)data[1]) << 8) | ((int16_t)data[0]);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	021b      	lsls	r3, r3, #8
 800055a:	b21a      	sxth	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b21b      	sxth	r3, r3
 8000562:	4313      	orrs	r3, r2
 8000564:	b21a      	sxth	r2, r3
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	801a      	strh	r2, [r3, #0]
    *LinACCp_X /= 100;
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000570:	4a1f      	ldr	r2, [pc, #124]	; (80005f0 <calc+0xac>)
 8000572:	fb82 1203 	smull	r1, r2, r2, r3
 8000576:	1152      	asrs	r2, r2, #5
 8000578:	17db      	asrs	r3, r3, #31
 800057a:	1ad3      	subs	r3, r2, r3
 800057c:	b21a      	sxth	r2, r3
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	801a      	strh	r2, [r3, #0]

    *LinACCp_Y = (((int16_t)data[3]) << 8) | ((int16_t)data[2]);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	3303      	adds	r3, #3
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21a      	sxth	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	3302      	adds	r3, #2
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b21b      	sxth	r3, r3
 8000594:	4313      	orrs	r3, r2
 8000596:	b21a      	sxth	r2, r3
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	801a      	strh	r2, [r3, #0]
    *LinACCp_Y /= 100;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a2:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <calc+0xac>)
 80005a4:	fb82 1203 	smull	r1, r2, r2, r3
 80005a8:	1152      	asrs	r2, r2, #5
 80005aa:	17db      	asrs	r3, r3, #31
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	b21a      	sxth	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	801a      	strh	r2, [r3, #0]

    *LinACCp_Z = (((int16_t)data[5]) << 8) | ((int16_t)data[4]);
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3305      	adds	r3, #5
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	021b      	lsls	r3, r3, #8
 80005bc:	b21a      	sxth	r2, r3
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3304      	adds	r3, #4
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	b21b      	sxth	r3, r3
 80005c6:	4313      	orrs	r3, r2
 80005c8:	b21a      	sxth	r2, r3
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	801a      	strh	r2, [r3, #0]
    *LinACCp_Z /= 100;
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <calc+0xac>)
 80005d6:	fb82 1203 	smull	r1, r2, r2, r3
 80005da:	1152      	asrs	r2, r2, #5
 80005dc:	17db      	asrs	r3, r3, #31
 80005de:	1ad3      	subs	r3, r2, r3
 80005e0:	b21a      	sxth	r2, r3
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	801a      	strh	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	51eb851f 	.word	0x51eb851f

080005f4 <print>:

void print() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	sprintf(str1, "%d", LinACC_X);
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <print+0xa0>)
 80005fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005fe:	461a      	mov	r2, r3
 8000600:	4925      	ldr	r1, [pc, #148]	; (8000698 <print+0xa4>)
 8000602:	4826      	ldr	r0, [pc, #152]	; (800069c <print+0xa8>)
 8000604:	f004 fe60 	bl	80052c8 <siprintf>
	strcat(str1, " , ");
 8000608:	4824      	ldr	r0, [pc, #144]	; (800069c <print+0xa8>)
 800060a:	f7ff fda1 	bl	8000150 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	4b22      	ldr	r3, [pc, #136]	; (800069c <print+0xa8>)
 8000614:	4413      	add	r3, r2
 8000616:	4a22      	ldr	r2, [pc, #136]	; (80006a0 <print+0xac>)
 8000618:	6810      	ldr	r0, [r2, #0]
 800061a:	6018      	str	r0, [r3, #0]

	sprintf(str2, "%d", LinACC_Y);
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <print+0xb0>)
 800061e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000622:	461a      	mov	r2, r3
 8000624:	491c      	ldr	r1, [pc, #112]	; (8000698 <print+0xa4>)
 8000626:	4820      	ldr	r0, [pc, #128]	; (80006a8 <print+0xb4>)
 8000628:	f004 fe4e 	bl	80052c8 <siprintf>
	strcat(str1,str2);
 800062c:	491e      	ldr	r1, [pc, #120]	; (80006a8 <print+0xb4>)
 800062e:	481b      	ldr	r0, [pc, #108]	; (800069c <print+0xa8>)
 8000630:	f004 fe72 	bl	8005318 <strcat>
	strcat(str1, " , ");
 8000634:	4819      	ldr	r0, [pc, #100]	; (800069c <print+0xa8>)
 8000636:	f7ff fd8b 	bl	8000150 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	461a      	mov	r2, r3
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <print+0xa8>)
 8000640:	4413      	add	r3, r2
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <print+0xac>)
 8000644:	6810      	ldr	r0, [r2, #0]
 8000646:	6018      	str	r0, [r3, #0]

	sprintf(str2, "%d", LinACC_Z);
 8000648:	4b18      	ldr	r3, [pc, #96]	; (80006ac <print+0xb8>)
 800064a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800064e:	461a      	mov	r2, r3
 8000650:	4911      	ldr	r1, [pc, #68]	; (8000698 <print+0xa4>)
 8000652:	4815      	ldr	r0, [pc, #84]	; (80006a8 <print+0xb4>)
 8000654:	f004 fe38 	bl	80052c8 <siprintf>
	strcat(str1,str2);
 8000658:	4913      	ldr	r1, [pc, #76]	; (80006a8 <print+0xb4>)
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <print+0xa8>)
 800065c:	f004 fe5c 	bl	8005318 <strcat>
	strcat(str1, "\n");
 8000660:	480e      	ldr	r0, [pc, #56]	; (800069c <print+0xa8>)
 8000662:	f7ff fd75 	bl	8000150 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <print+0xa8>)
 800066c:	4413      	add	r3, r2
 800066e:	4910      	ldr	r1, [pc, #64]	; (80006b0 <print+0xbc>)
 8000670:	461a      	mov	r2, r3
 8000672:	460b      	mov	r3, r1
 8000674:	881b      	ldrh	r3, [r3, #0]
 8000676:	8013      	strh	r3, [r2, #0]

	HAL_UART_Transmit(&huart1, (uint8_t*)str1, strlen(str1), HAL_MAX_DELAY);
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <print+0xa8>)
 800067a:	f7ff fd69 	bl	8000150 <strlen>
 800067e:	4603      	mov	r3, r0
 8000680:	b29a      	uxth	r2, r3
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	4905      	ldr	r1, [pc, #20]	; (800069c <print+0xa8>)
 8000688:	480a      	ldr	r0, [pc, #40]	; (80006b4 <print+0xc0>)
 800068a:	f003 f9fd 	bl	8003a88 <HAL_UART_Transmit>
}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000031c 	.word	0x2000031c
 8000698:	08005d5c 	.word	0x08005d5c
 800069c:	2000032c 	.word	0x2000032c
 80006a0:	08005d60 	.word	0x08005d60
 80006a4:	2000031e 	.word	0x2000031e
 80006a8:	2000042c 	.word	0x2000042c
 80006ac:	20000320 	.word	0x20000320
 80006b0:	08005d64 	.word	0x08005d64
 80006b4:	200004f0 	.word	0x200004f0

080006b8 <StartBNO>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBNO */
void StartBNO(void const * argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    // Write configuration to the IMU (e.g., set to accelerometer mode)
    i2c_write(IMU_ADDRESS, MEM_WRITE, WRITE_DATA);
 80006c0:	2208      	movs	r2, #8
 80006c2:	213d      	movs	r1, #61	; 0x3d
 80006c4:	2050      	movs	r0, #80	; 0x50
 80006c6:	f7ff fef9 	bl	80004bc <i2c_write>

    for (;;) {
        // 1. Read 6 bytes of linear acceleration data starting from MEM_ADDRESS
        i2c_read(IMU_ADDRESS, MEM_ADDRESS, i2c_buffer, BUFFER_SIZE);
 80006ca:	2306      	movs	r3, #6
 80006cc:	4a08      	ldr	r2, [pc, #32]	; (80006f0 <StartBNO+0x38>)
 80006ce:	2128      	movs	r1, #40	; 0x28
 80006d0:	2050      	movs	r0, #80	; 0x50
 80006d2:	f7ff ff11 	bl	80004f8 <i2c_read>

        // 2. Calculate linear acceleration from received data
        calc(i2c_buffer, &LinACC_X, &LinACC_Y, &LinACC_Z);
 80006d6:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <StartBNO+0x3c>)
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <StartBNO+0x40>)
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <StartBNO+0x44>)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <StartBNO+0x38>)
 80006de:	f7ff ff31 	bl	8000544 <calc>

        // 3. Print the linear acceleration data via UART
        print();
 80006e2:	f7ff ff87 	bl	80005f4 <print>

        osDelay(100); // Adjust delay as needed
 80006e6:	2064      	movs	r0, #100	; 0x64
 80006e8:	f003 fc0c 	bl	8003f04 <osDelay>
        i2c_read(IMU_ADDRESS, MEM_ADDRESS, i2c_buffer, BUFFER_SIZE);
 80006ec:	e7ed      	b.n	80006ca <StartBNO+0x12>
 80006ee:	bf00      	nop
 80006f0:	20000324 	.word	0x20000324
 80006f4:	20000320 	.word	0x20000320
 80006f8:	2000031e 	.word	0x2000031e
 80006fc:	2000031c 	.word	0x2000031c

08000700 <StartIR>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartIR */
void StartIR(void const * argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b090      	sub	sp, #64	; 0x40
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartIR */
  // Initialize necessary peripherals
  char msg[50];            // Buffer to hold UART messages
  uint16_t adcValue = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  const uint16_t threshold = 300;  // Define an appropriate threshold based on sensor readings
 800070c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000710:	87bb      	strh	r3, [r7, #60]	; 0x3c
  for(;;)
  {
	 // Start ADC conversion
	 HAL_ADC_Start(&hadc1);
 8000712:	4821      	ldr	r0, [pc, #132]	; (8000798 <StartIR+0x98>)
 8000714:	f000 fb4e 	bl	8000db4 <HAL_ADC_Start>
	 // Wait for the conversion to finish
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000718:	f04f 31ff 	mov.w	r1, #4294967295
 800071c:	481e      	ldr	r0, [pc, #120]	; (8000798 <StartIR+0x98>)
 800071e:	f000 fc23 	bl	8000f68 <HAL_ADC_PollForConversion>
	 // Get the converted value
	 adcValue = HAL_ADC_GetValue(&hadc1);
 8000722:	481d      	ldr	r0, [pc, #116]	; (8000798 <StartIR+0x98>)
 8000724:	f000 fd26 	bl	8001174 <HAL_ADC_GetValue>
 8000728:	4603      	mov	r3, r0
 800072a:	87fb      	strh	r3, [r7, #62]	; 0x3e
	 // Check if the value exceeds the threshold
	 if (adcValue < threshold)
 800072c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800072e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000730:	429a      	cmp	r2, r3
 8000732:	d215      	bcs.n	8000760 <StartIR+0x60>
	 {
	   // If the value is too high, send a "Too close alert" message
	   snprintf(msg, sizeof(msg), "Distance Alert: Too Close! ADC: %u\r\n", adcValue);
 8000734:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000736:	f107 0008 	add.w	r0, r7, #8
 800073a:	4a18      	ldr	r2, [pc, #96]	; (800079c <StartIR+0x9c>)
 800073c:	2132      	movs	r1, #50	; 0x32
 800073e:	f004 fd8f 	bl	8005260 <sniprintf>
	   HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fd02 	bl	8000150 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	b29a      	uxth	r2, r3
 8000750:	f107 0108 	add.w	r1, r7, #8
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <StartIR+0xa0>)
 800075a:	f003 f995 	bl	8003a88 <HAL_UART_Transmit>
 800075e:	e014      	b.n	800078a <StartIR+0x8a>
	 }
	 else
	 {
	   // If the value is below the threshold, send a "Keep moving" message
	   snprintf(msg, sizeof(msg), "Distance OK: Keep Moving. ADC: %u\r\n", adcValue);
 8000760:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000762:	f107 0008 	add.w	r0, r7, #8
 8000766:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <StartIR+0xa4>)
 8000768:	2132      	movs	r1, #50	; 0x32
 800076a:	f004 fd79 	bl	8005260 <sniprintf>
	   HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fcec 	bl	8000150 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	b29a      	uxth	r2, r3
 800077c:	f107 0108 	add.w	r1, r7, #8
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	4806      	ldr	r0, [pc, #24]	; (80007a0 <StartIR+0xa0>)
 8000786:	f003 f97f 	bl	8003a88 <HAL_UART_Transmit>
	 }
	 HAL_ADC_Stop(&hadc1); // stop adc
 800078a:	4803      	ldr	r0, [pc, #12]	; (8000798 <StartIR+0x98>)
 800078c:	f000 fbc0 	bl	8000f10 <HAL_ADC_Stop>
	 // Add a delay before the next reading
	 osDelay(100);  // Adjust delay as needed for your application
 8000790:	2064      	movs	r0, #100	; 0x64
 8000792:	f003 fbb7 	bl	8003f04 <osDelay>
	 HAL_ADC_Start(&hadc1);
 8000796:	e7bc      	b.n	8000712 <StartIR+0x12>
 8000798:	2000046c 	.word	0x2000046c
 800079c:	08005d68 	.word	0x08005d68
 80007a0:	200004f0 	.word	0x200004f0
 80007a4:	08005d90 	.word	0x08005d90

080007a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ba:	f000 fa07 	bl	8000bcc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40012c00 	.word	0x40012c00

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <HAL_MspInit+0x4c>)
 80007e0:	699b      	ldr	r3, [r3, #24]
 80007e2:	4a10      	ldr	r2, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6193      	str	r3, [r2, #24]
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_MspInit+0x4c>)
 80007ec:	699b      	ldr	r3, [r3, #24]
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_MspInit+0x4c>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_MspInit+0x4c>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	210f      	movs	r1, #15
 8000812:	f06f 0001 	mvn.w	r0, #1
 8000816:	f000 ff02 	bl	800161e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0310 	add.w	r3, r7, #16
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <HAL_ADC_MspInit+0x6c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d121      	bne.n	800088c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <HAL_ADC_MspInit+0x70>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a12      	ldr	r2, [pc, #72]	; (8000898 <HAL_ADC_MspInit+0x70>)
 800084e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b10      	ldr	r3, [pc, #64]	; (8000898 <HAL_ADC_MspInit+0x70>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b0d      	ldr	r3, [pc, #52]	; (8000898 <HAL_ADC_MspInit+0x70>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <HAL_ADC_MspInit+0x70>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <HAL_ADC_MspInit+0x70>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000878:	2308      	movs	r3, #8
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800087c:	2303      	movs	r3, #3
 800087e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <HAL_ADC_MspInit+0x74>)
 8000888:	f000 fef4 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40012400 	.word	0x40012400
 8000898:	40021000 	.word	0x40021000
 800089c:	40010800 	.word	0x40010800

080008a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a16      	ldr	r2, [pc, #88]	; (8000914 <HAL_I2C_MspInit+0x74>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d124      	bne.n	800090a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <HAL_I2C_MspInit+0x78>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <HAL_I2C_MspInit+0x78>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	6193      	str	r3, [r2, #24]
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <HAL_I2C_MspInit+0x78>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	f003 0308 	and.w	r3, r3, #8
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80008d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80008dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008de:	2312      	movs	r3, #18
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e2:	2303      	movs	r3, #3
 80008e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	f107 0310 	add.w	r3, r7, #16
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <HAL_I2C_MspInit+0x7c>)
 80008ee:	f000 fec1 	bl	8001674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <HAL_I2C_MspInit+0x78>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <HAL_I2C_MspInit+0x78>)
 80008f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008fc:	61d3      	str	r3, [r2, #28]
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_I2C_MspInit+0x78>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800090a:	bf00      	nop
 800090c:	3720      	adds	r7, #32
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40005800 	.word	0x40005800
 8000918:	40021000 	.word	0x40021000
 800091c:	40010c00 	.word	0x40010c00

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <HAL_UART_MspInit+0x8c>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d131      	bne.n	80009a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <HAL_UART_MspInit+0x94>)
 8000986:	f000 fe75 	bl	8001674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_MspInit+0x94>)
 80009a0:	f000 fe68 	bl	8001674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010800 	.word	0x40010800

080009b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08c      	sub	sp, #48	; 0x30
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <HAL_InitTick+0xd0>)
 80009d0:	699b      	ldr	r3, [r3, #24]
 80009d2:	4a2d      	ldr	r2, [pc, #180]	; (8000a88 <HAL_InitTick+0xd0>)
 80009d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009d8:	6193      	str	r3, [r2, #24]
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <HAL_InitTick+0xd0>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e6:	f107 020c 	add.w	r2, r7, #12
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	4611      	mov	r1, r2
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 fc01 	bl	80031f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009f6:	f002 fbeb 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 80009fa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fe:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <HAL_InitTick+0xd4>)
 8000a00:	fba2 2303 	umull	r2, r3, r2, r3
 8000a04:	0c9b      	lsrs	r3, r3, #18
 8000a06:	3b01      	subs	r3, #1
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <HAL_InitTick+0xd8>)
 8000a0c:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <HAL_InitTick+0xdc>)
 8000a0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <HAL_InitTick+0xd8>)
 8000a12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a16:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a18:	4a1d      	ldr	r2, [pc, #116]	; (8000a90 <HAL_InitTick+0xd8>)
 8000a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_InitTick+0xd8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_InitTick+0xd8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_InitTick+0xd8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000a30:	4817      	ldr	r0, [pc, #92]	; (8000a90 <HAL_InitTick+0xd8>)
 8000a32:	f002 fd9b 	bl	800356c <HAL_TIM_Base_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d11b      	bne.n	8000a7c <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000a44:	4812      	ldr	r0, [pc, #72]	; (8000a90 <HAL_InitTick+0xd8>)
 8000a46:	f002 fde9 	bl	800361c <HAL_TIM_Base_Start_IT>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000a50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d111      	bne.n	8000a7c <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 fdfc 	bl	8001656 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d808      	bhi.n	8000a76 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	2019      	movs	r0, #25
 8000a6a:	f000 fdd8 	bl	800161e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_InitTick+0xe0>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	e002      	b.n	8000a7c <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000a76:	2301      	movs	r3, #1
 8000a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3730      	adds	r7, #48	; 0x30
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	20000540 	.word	0x20000540
 8000a94:	40012c00 	.word	0x40012c00
 8000a98:	20000004 	.word	0x20000004

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
	...

08000ac8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <TIM1_UP_IRQHandler+0x10>)
 8000ace:	f002 fdf7 	bl	80036c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000540 	.word	0x20000540

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f004 fc6a 	bl	80053e4 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20005000 	.word	0x20005000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	20000588 	.word	0x20000588
 8000b44:	20001430 	.word	0x20001430

08000b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff fff8 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b5a:	490c      	ldr	r1, [pc, #48]	; (8000b8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	; (8000b90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b70:	4c09      	ldr	r4, [pc, #36]	; (8000b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f004 fc37 	bl	80053f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b82:	f7ff fb05 	bl	8000190 <main>
  bx lr
 8000b86:	4770      	bx	lr
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b90:	08005e38 	.word	0x08005e38
  ldr r2, =_sbss
 8000b94:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b98:	2000142c 	.word	0x2000142c

08000b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_2_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_Init+0x28>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_Init+0x28>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 fd29 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	200f      	movs	r0, #15
 8000bb8:	f7ff fefe 	bl	80009b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fe0c 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <HAL_IncTick+0x1c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <HAL_IncTick+0x20>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a03      	ldr	r2, [pc, #12]	; (8000bec <HAL_IncTick+0x20>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000008 	.word	0x20000008
 8000bec:	2000058c 	.word	0x2000058c

08000bf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <HAL_GetTick+0x10>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	2000058c 	.word	0x2000058c

08000c04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d101      	bne.n	8000c26 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e0be      	b.n	8000da4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d109      	bne.n	8000c48 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2200      	movs	r2, #0
 8000c38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff fdf0 	bl	8000828 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 fbf1 	bl	8001430 <ADC_ConversionStop_Disable>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f040 8099 	bne.w	8000d92 <HAL_ADC_Init+0x18e>
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8095 	bne.w	8000d92 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c70:	f023 0302 	bic.w	r3, r3, #2
 8000c74:	f043 0202 	orr.w	r2, r3, #2
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c84:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	7b1b      	ldrb	r3, [r3, #12]
 8000c8a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000c8c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c9c:	d003      	beq.n	8000ca6 <HAL_ADC_Init+0xa2>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d102      	bne.n	8000cac <HAL_ADC_Init+0xa8>
 8000ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000caa:	e000      	b.n	8000cae <HAL_ADC_Init+0xaa>
 8000cac:	2300      	movs	r3, #0
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7d1b      	ldrb	r3, [r3, #20]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d119      	bne.n	8000cf0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	7b1b      	ldrb	r3, [r3, #12]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d109      	bne.n	8000cd8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	035a      	lsls	r2, r3, #13
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	e00b      	b.n	8000cf0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cdc:	f043 0220 	orr.w	r2, r3, #32
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce8:	f043 0201 	orr.w	r2, r3, #1
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	430a      	orrs	r2, r1
 8000d02:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	4b28      	ldr	r3, [pc, #160]	; (8000dac <HAL_ADC_Init+0x1a8>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	6812      	ldr	r2, [r2, #0]
 8000d12:	68b9      	ldr	r1, [r7, #8]
 8000d14:	430b      	orrs	r3, r1
 8000d16:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d20:	d003      	beq.n	8000d2a <HAL_ADC_Init+0x126>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d104      	bne.n	8000d34 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	691b      	ldr	r3, [r3, #16]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	051b      	lsls	r3, r3, #20
 8000d32:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_ADC_Init+0x1ac>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d10b      	bne.n	8000d70 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d62:	f023 0303 	bic.w	r3, r3, #3
 8000d66:	f043 0201 	orr.w	r2, r3, #1
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d6e:	e018      	b.n	8000da2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	f023 0312 	bic.w	r3, r3, #18
 8000d78:	f043 0210 	orr.w	r2, r3, #16
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d84:	f043 0201 	orr.w	r2, r3, #1
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000d90:	e007      	b.n	8000da2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	f043 0210 	orr.w	r2, r3, #16
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3718      	adds	r7, #24
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	ffe1f7fd 	.word	0xffe1f7fd
 8000db0:	ff1f0efe 	.word	0xff1f0efe

08000db4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d101      	bne.n	8000dce <HAL_ADC_Start+0x1a>
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e098      	b.n	8000f00 <HAL_ADC_Start+0x14c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f000 fad0 	bl	800137c <ADC_Enable>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8087 	bne.w	8000ef6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000df0:	f023 0301 	bic.w	r3, r3, #1
 8000df4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a41      	ldr	r2, [pc, #260]	; (8000f08 <HAL_ADC_Start+0x154>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d105      	bne.n	8000e12 <HAL_ADC_Start+0x5e>
 8000e06:	4b41      	ldr	r3, [pc, #260]	; (8000f0c <HAL_ADC_Start+0x158>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d115      	bne.n	8000e3e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d026      	beq.n	8000e7a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e3c:	e01d      	b.n	8000e7a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a2f      	ldr	r2, [pc, #188]	; (8000f0c <HAL_ADC_Start+0x158>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d004      	beq.n	8000e5e <HAL_ADC_Start+0xaa>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <HAL_ADC_Start+0x154>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d10d      	bne.n	8000e7a <HAL_ADC_Start+0xc6>
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <HAL_ADC_Start+0x158>)
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d007      	beq.n	8000e7a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e72:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8a:	f023 0206 	bic.w	r2, r3, #6
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e92:	e002      	b.n	8000e9a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2200      	movs	r2, #0
 8000e98:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f06f 0202 	mvn.w	r2, #2
 8000eaa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000eb6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000eba:	d113      	bne.n	8000ee4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ec0:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_ADC_Start+0x154>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d105      	bne.n	8000ed2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_ADC_Start+0x158>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d108      	bne.n	8000ee4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000ee0:	609a      	str	r2, [r3, #8]
 8000ee2:	e00c      	b.n	8000efe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	e003      	b.n	8000efe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40012800 	.word	0x40012800
 8000f0c:	40012400 	.word	0x40012400

08000f10 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d101      	bne.n	8000f2a <HAL_ADC_Stop+0x1a>
 8000f26:	2302      	movs	r3, #2
 8000f28:	e01a      	b.n	8000f60 <HAL_ADC_Stop+0x50>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fa7c 	bl	8001430 <ADC_ConversionStop_Disable>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d109      	bne.n	8000f56 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f4a:	f023 0301 	bic.w	r3, r3, #1
 8000f4e:	f043 0201 	orr.w	r2, r3, #1
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f68:	b590      	push	{r4, r7, lr}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f7e:	f7ff fe37 	bl	8000bf0 <HAL_GetTick>
 8000f82:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	f043 0220 	orr.w	r2, r3, #32
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e0d3      	b.n	8001152 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d131      	bne.n	800101c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d12a      	bne.n	800101c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fc6:	e021      	b.n	800100c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fce:	d01d      	beq.n	800100c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <HAL_ADC_PollForConversion+0x7e>
 8000fd6:	f7ff fe0b 	bl	8000bf0 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	683a      	ldr	r2, [r7, #0]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d212      	bcs.n	800100c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d10b      	bne.n	800100c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff8:	f043 0204 	orr.w	r2, r3, #4
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e0a2      	b.n	8001152 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0d6      	beq.n	8000fc8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800101a:	e070      	b.n	80010fe <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800101c:	4b4f      	ldr	r3, [pc, #316]	; (800115c <HAL_ADC_PollForConversion+0x1f4>)
 800101e:	681c      	ldr	r4, [r3, #0]
 8001020:	2002      	movs	r0, #2
 8001022:	f002 f9ed 	bl	8003400 <HAL_RCCEx_GetPeriphCLKFreq>
 8001026:	4603      	mov	r3, r0
 8001028:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6919      	ldr	r1, [r3, #16]
 8001032:	4b4b      	ldr	r3, [pc, #300]	; (8001160 <HAL_ADC_PollForConversion+0x1f8>)
 8001034:	400b      	ands	r3, r1
 8001036:	2b00      	cmp	r3, #0
 8001038:	d118      	bne.n	800106c <HAL_ADC_PollForConversion+0x104>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68d9      	ldr	r1, [r3, #12]
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <HAL_ADC_PollForConversion+0x1fc>)
 8001042:	400b      	ands	r3, r1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d111      	bne.n	800106c <HAL_ADC_PollForConversion+0x104>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6919      	ldr	r1, [r3, #16]
 800104e:	4b46      	ldr	r3, [pc, #280]	; (8001168 <HAL_ADC_PollForConversion+0x200>)
 8001050:	400b      	ands	r3, r1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d108      	bne.n	8001068 <HAL_ADC_PollForConversion+0x100>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68d9      	ldr	r1, [r3, #12]
 800105c:	4b43      	ldr	r3, [pc, #268]	; (800116c <HAL_ADC_PollForConversion+0x204>)
 800105e:	400b      	ands	r3, r1
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_ADC_PollForConversion+0x100>
 8001064:	2314      	movs	r3, #20
 8001066:	e020      	b.n	80010aa <HAL_ADC_PollForConversion+0x142>
 8001068:	2329      	movs	r3, #41	; 0x29
 800106a:	e01e      	b.n	80010aa <HAL_ADC_PollForConversion+0x142>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6919      	ldr	r1, [r3, #16]
 8001072:	4b3d      	ldr	r3, [pc, #244]	; (8001168 <HAL_ADC_PollForConversion+0x200>)
 8001074:	400b      	ands	r3, r1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d106      	bne.n	8001088 <HAL_ADC_PollForConversion+0x120>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68d9      	ldr	r1, [r3, #12]
 8001080:	4b3a      	ldr	r3, [pc, #232]	; (800116c <HAL_ADC_PollForConversion+0x204>)
 8001082:	400b      	ands	r3, r1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00d      	beq.n	80010a4 <HAL_ADC_PollForConversion+0x13c>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6919      	ldr	r1, [r3, #16]
 800108e:	4b38      	ldr	r3, [pc, #224]	; (8001170 <HAL_ADC_PollForConversion+0x208>)
 8001090:	400b      	ands	r3, r1
 8001092:	2b00      	cmp	r3, #0
 8001094:	d108      	bne.n	80010a8 <HAL_ADC_PollForConversion+0x140>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	68d9      	ldr	r1, [r3, #12]
 800109c:	4b34      	ldr	r3, [pc, #208]	; (8001170 <HAL_ADC_PollForConversion+0x208>)
 800109e:	400b      	ands	r3, r1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_ADC_PollForConversion+0x140>
 80010a4:	2354      	movs	r3, #84	; 0x54
 80010a6:	e000      	b.n	80010aa <HAL_ADC_PollForConversion+0x142>
 80010a8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010b0:	e021      	b.n	80010f6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d01a      	beq.n	80010f0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d007      	beq.n	80010d0 <HAL_ADC_PollForConversion+0x168>
 80010c0:	f7ff fd96 	bl	8000bf0 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	683a      	ldr	r2, [r7, #0]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d20f      	bcs.n	80010f0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d90b      	bls.n	80010f0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010dc:	f043 0204 	orr.w	r2, r3, #4
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e030      	b.n	8001152 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	3301      	adds	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d8d9      	bhi.n	80010b2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f06f 0212 	mvn.w	r2, #18
 8001106:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800111e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001122:	d115      	bne.n	8001150 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001128:	2b00      	cmp	r3, #0
 800112a:	d111      	bne.n	8001150 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d105      	bne.n	8001150 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	bd90      	pop	{r4, r7, pc}
 800115a:	bf00      	nop
 800115c:	20000000 	.word	0x20000000
 8001160:	24924924 	.word	0x24924924
 8001164:	00924924 	.word	0x00924924
 8001168:	12492492 	.word	0x12492492
 800116c:	00492492 	.word	0x00492492
 8001170:	00249249 	.word	0x00249249

08001174 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d101      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x20>
 80011a8:	2302      	movs	r3, #2
 80011aa:	e0dc      	b.n	8001366 <HAL_ADC_ConfigChannel+0x1da>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b06      	cmp	r3, #6
 80011ba:	d81c      	bhi.n	80011f6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	3b05      	subs	r3, #5
 80011ce:	221f      	movs	r2, #31
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	4019      	ands	r1, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	3b05      	subs	r3, #5
 80011e8:	fa00 f203 	lsl.w	r2, r0, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	430a      	orrs	r2, r1
 80011f2:	635a      	str	r2, [r3, #52]	; 0x34
 80011f4:	e03c      	b.n	8001270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d81c      	bhi.n	8001238 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	3b23      	subs	r3, #35	; 0x23
 8001210:	221f      	movs	r2, #31
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	4019      	ands	r1, r3
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3b23      	subs	r3, #35	; 0x23
 800122a:	fa00 f203 	lsl.w	r2, r0, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	631a      	str	r2, [r3, #48]	; 0x30
 8001236:	e01b      	b.n	8001270 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	3b41      	subs	r3, #65	; 0x41
 800124a:	221f      	movs	r2, #31
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	4019      	ands	r1, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	6818      	ldr	r0, [r3, #0]
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	4613      	mov	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	3b41      	subs	r3, #65	; 0x41
 8001264:	fa00 f203 	lsl.w	r2, r0, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	430a      	orrs	r2, r1
 800126e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b09      	cmp	r3, #9
 8001276:	d91c      	bls.n	80012b2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	68d9      	ldr	r1, [r3, #12]
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4613      	mov	r3, r2
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	4413      	add	r3, r2
 8001288:	3b1e      	subs	r3, #30
 800128a:	2207      	movs	r2, #7
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	4019      	ands	r1, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	6898      	ldr	r0, [r3, #8]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4613      	mov	r3, r2
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	3b1e      	subs	r3, #30
 80012a4:	fa00 f203 	lsl.w	r2, r0, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	e019      	b.n	80012e6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4613      	mov	r3, r2
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4413      	add	r3, r2
 80012c2:	2207      	movs	r2, #7
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	43db      	mvns	r3, r3
 80012ca:	4019      	ands	r1, r3
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	6898      	ldr	r0, [r3, #8]
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	fa00 f203 	lsl.w	r2, r0, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b10      	cmp	r3, #16
 80012ec:	d003      	beq.n	80012f6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80012f2:	2b11      	cmp	r3, #17
 80012f4:	d132      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_ADC_ConfigChannel+0x1e4>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d125      	bne.n	800134c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d126      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800131c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b10      	cmp	r3, #16
 8001324:	d11a      	bne.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <HAL_ADC_ConfigChannel+0x1e8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_ADC_ConfigChannel+0x1ec>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	0c9a      	lsrs	r2, r3, #18
 8001332:	4613      	mov	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800133c:	e002      	b.n	8001344 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3b01      	subs	r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f9      	bne.n	800133e <HAL_ADC_ConfigChannel+0x1b2>
 800134a:	e007      	b.n	800135c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	f043 0220 	orr.w	r2, r3, #32
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3714      	adds	r7, #20
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	40012400 	.word	0x40012400
 8001374:	20000000 	.word	0x20000000
 8001378:	431bde83 	.word	0x431bde83

0800137c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b01      	cmp	r3, #1
 8001398:	d040      	beq.n	800141c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0201 	orr.w	r2, r2, #1
 80013a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <ADC_Enable+0xac>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a1f      	ldr	r2, [pc, #124]	; (800142c <ADC_Enable+0xb0>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	0c9b      	lsrs	r3, r3, #18
 80013b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013b8:	e002      	b.n	80013c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3b01      	subs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f9      	bne.n	80013ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80013c6:	f7ff fc13 	bl	8000bf0 <HAL_GetTick>
 80013ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80013cc:	e01f      	b.n	800140e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80013ce:	f7ff fc0f 	bl	8000bf0 <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d918      	bls.n	800140e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d011      	beq.n	800140e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ee:	f043 0210 	orr.w	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	f043 0201 	orr.w	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e007      	b.n	800141e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	2b01      	cmp	r3, #1
 800141a:	d1d8      	bne.n	80013ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000000 	.word	0x20000000
 800142c:	431bde83 	.word	0x431bde83

08001430 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	2b01      	cmp	r3, #1
 8001448:	d12e      	bne.n	80014a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800145a:	f7ff fbc9 	bl	8000bf0 <HAL_GetTick>
 800145e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001460:	e01b      	b.n	800149a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001462:	f7ff fbc5 	bl	8000bf0 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d914      	bls.n	800149a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b01      	cmp	r3, #1
 800147c:	d10d      	bne.n	800149a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	f043 0210 	orr.w	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	f043 0201 	orr.w	r2, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e007      	b.n	80014aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d0dc      	beq.n	8001462 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d0:	4013      	ands	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <__NVIC_SetPriorityGrouping+0x44>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	60d3      	str	r3, [r2, #12]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <__NVIC_GetPriorityGrouping+0x18>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	0a1b      	lsrs	r3, r3, #8
 8001506:	f003 0307 	and.w	r3, r3, #7
}
 800150a:	4618      	mov	r0, r3
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	2b00      	cmp	r3, #0
 8001528:	db0b      	blt.n	8001542 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 021f 	and.w	r2, r3, #31
 8001530:	4906      	ldr	r1, [pc, #24]	; (800154c <__NVIC_EnableIRQ+0x34>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	2001      	movs	r0, #1
 800153a:	fa00 f202 	lsl.w	r2, r0, r2
 800153e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bc80      	pop	{r7}
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100

08001550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001560:	2b00      	cmp	r3, #0
 8001562:	db0a      	blt.n	800157a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	b2da      	uxtb	r2, r3
 8001568:	490c      	ldr	r1, [pc, #48]	; (800159c <__NVIC_SetPriority+0x4c>)
 800156a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156e:	0112      	lsls	r2, r2, #4
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	440b      	add	r3, r1
 8001574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001578:	e00a      	b.n	8001590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4908      	ldr	r1, [pc, #32]	; (80015a0 <__NVIC_SetPriority+0x50>)
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 030f 	and.w	r3, r3, #15
 8001586:	3b04      	subs	r3, #4
 8001588:	0112      	lsls	r2, r2, #4
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	440b      	add	r3, r1
 800158e:	761a      	strb	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b089      	sub	sp, #36	; 0x24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f1c3 0307 	rsb	r3, r3, #7
 80015be:	2b04      	cmp	r3, #4
 80015c0:	bf28      	it	cs
 80015c2:	2304      	movcs	r3, #4
 80015c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	3304      	adds	r3, #4
 80015ca:	2b06      	cmp	r3, #6
 80015cc:	d902      	bls.n	80015d4 <NVIC_EncodePriority+0x30>
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3b03      	subs	r3, #3
 80015d2:	e000      	b.n	80015d6 <NVIC_EncodePriority+0x32>
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	f04f 32ff 	mov.w	r2, #4294967295
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43da      	mvns	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	401a      	ands	r2, r3
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	43d9      	mvns	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015fc:	4313      	orrs	r3, r2
         );
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff4f 	bl	80014b4 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff64 	bl	80014fc <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ffb2 	bl	80015a4 <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff81 	bl	8001550 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff57 	bl	8001518 <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b08b      	sub	sp, #44	; 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	e169      	b.n	800195c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001688:	2201      	movs	r2, #1
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	69fa      	ldr	r2, [r7, #28]
 8001698:	4013      	ands	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f040 8158 	bne.w	8001956 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	4a9a      	ldr	r2, [pc, #616]	; (8001914 <HAL_GPIO_Init+0x2a0>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d05e      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016b0:	4a98      	ldr	r2, [pc, #608]	; (8001914 <HAL_GPIO_Init+0x2a0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d875      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016b6:	4a98      	ldr	r2, [pc, #608]	; (8001918 <HAL_GPIO_Init+0x2a4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d058      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016bc:	4a96      	ldr	r2, [pc, #600]	; (8001918 <HAL_GPIO_Init+0x2a4>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d86f      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016c2:	4a96      	ldr	r2, [pc, #600]	; (800191c <HAL_GPIO_Init+0x2a8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d052      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016c8:	4a94      	ldr	r2, [pc, #592]	; (800191c <HAL_GPIO_Init+0x2a8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d869      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ce:	4a94      	ldr	r2, [pc, #592]	; (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d04c      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016d4:	4a92      	ldr	r2, [pc, #584]	; (8001920 <HAL_GPIO_Init+0x2ac>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d863      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016da:	4a92      	ldr	r2, [pc, #584]	; (8001924 <HAL_GPIO_Init+0x2b0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d046      	beq.n	800176e <HAL_GPIO_Init+0xfa>
 80016e0:	4a90      	ldr	r2, [pc, #576]	; (8001924 <HAL_GPIO_Init+0x2b0>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d85d      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d82a      	bhi.n	8001740 <HAL_GPIO_Init+0xcc>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d859      	bhi.n	80017a2 <HAL_GPIO_Init+0x12e>
 80016ee:	a201      	add	r2, pc, #4	; (adr r2, 80016f4 <HAL_GPIO_Init+0x80>)
 80016f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f4:	0800176f 	.word	0x0800176f
 80016f8:	08001749 	.word	0x08001749
 80016fc:	0800175b 	.word	0x0800175b
 8001700:	0800179d 	.word	0x0800179d
 8001704:	080017a3 	.word	0x080017a3
 8001708:	080017a3 	.word	0x080017a3
 800170c:	080017a3 	.word	0x080017a3
 8001710:	080017a3 	.word	0x080017a3
 8001714:	080017a3 	.word	0x080017a3
 8001718:	080017a3 	.word	0x080017a3
 800171c:	080017a3 	.word	0x080017a3
 8001720:	080017a3 	.word	0x080017a3
 8001724:	080017a3 	.word	0x080017a3
 8001728:	080017a3 	.word	0x080017a3
 800172c:	080017a3 	.word	0x080017a3
 8001730:	080017a3 	.word	0x080017a3
 8001734:	080017a3 	.word	0x080017a3
 8001738:	08001751 	.word	0x08001751
 800173c:	08001765 	.word	0x08001765
 8001740:	4a79      	ldr	r2, [pc, #484]	; (8001928 <HAL_GPIO_Init+0x2b4>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001746:	e02c      	b.n	80017a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	623b      	str	r3, [r7, #32]
          break;
 800174e:	e029      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	3304      	adds	r3, #4
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e024      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	3308      	adds	r3, #8
 8001760:	623b      	str	r3, [r7, #32]
          break;
 8001762:	e01f      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	330c      	adds	r3, #12
 800176a:	623b      	str	r3, [r7, #32]
          break;
 800176c:	e01a      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001776:	2304      	movs	r3, #4
 8001778:	623b      	str	r3, [r7, #32]
          break;
 800177a:	e013      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d105      	bne.n	8001790 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001784:	2308      	movs	r3, #8
 8001786:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	611a      	str	r2, [r3, #16]
          break;
 800178e:	e009      	b.n	80017a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001790:	2308      	movs	r3, #8
 8001792:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	615a      	str	r2, [r3, #20]
          break;
 800179a:	e003      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
          break;
 80017a0:	e000      	b.n	80017a4 <HAL_GPIO_Init+0x130>
          break;
 80017a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2bff      	cmp	r3, #255	; 0xff
 80017a8:	d801      	bhi.n	80017ae <HAL_GPIO_Init+0x13a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	e001      	b.n	80017b2 <HAL_GPIO_Init+0x13e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3304      	adds	r3, #4
 80017b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2bff      	cmp	r3, #255	; 0xff
 80017b8:	d802      	bhi.n	80017c0 <HAL_GPIO_Init+0x14c>
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	e002      	b.n	80017c6 <HAL_GPIO_Init+0x152>
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	3b08      	subs	r3, #8
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	210f      	movs	r1, #15
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	fa01 f303 	lsl.w	r3, r1, r3
 80017d4:	43db      	mvns	r3, r3
 80017d6:	401a      	ands	r2, r3
 80017d8:	6a39      	ldr	r1, [r7, #32]
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	fa01 f303 	lsl.w	r3, r1, r3
 80017e0:	431a      	orrs	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80b1 	beq.w	8001956 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_GPIO_Init+0x2b8>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_GPIO_Init+0x2b8>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_GPIO_Init+0x2b8>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800180c:	4a48      	ldr	r2, [pc, #288]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a40      	ldr	r2, [pc, #256]	; (8001934 <HAL_GPIO_Init+0x2c0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d013      	beq.n	8001860 <HAL_GPIO_Init+0x1ec>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a3f      	ldr	r2, [pc, #252]	; (8001938 <HAL_GPIO_Init+0x2c4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00d      	beq.n	800185c <HAL_GPIO_Init+0x1e8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a3e      	ldr	r2, [pc, #248]	; (800193c <HAL_GPIO_Init+0x2c8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d007      	beq.n	8001858 <HAL_GPIO_Init+0x1e4>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a3d      	ldr	r2, [pc, #244]	; (8001940 <HAL_GPIO_Init+0x2cc>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d101      	bne.n	8001854 <HAL_GPIO_Init+0x1e0>
 8001850:	2303      	movs	r3, #3
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001854:	2304      	movs	r3, #4
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1ee>
 8001860:	2300      	movs	r3, #0
 8001862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	68fa      	ldr	r2, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001872:	492f      	ldr	r1, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x2bc>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	492c      	ldr	r1, [pc, #176]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]
 8001898:	e006      	b.n	80018a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189a:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	4928      	ldr	r1, [pc, #160]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	4922      	ldr	r1, [pc, #136]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	60cb      	str	r3, [r1, #12]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	491e      	ldr	r1, [pc, #120]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018dc:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4918      	ldr	r1, [pc, #96]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ea:	4b16      	ldr	r3, [pc, #88]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	4914      	ldr	r1, [pc, #80]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d021      	beq.n	8001948 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	490e      	ldr	r1, [pc, #56]	; (8001944 <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e021      	b.n	8001956 <HAL_GPIO_Init+0x2e2>
 8001912:	bf00      	nop
 8001914:	10320000 	.word	0x10320000
 8001918:	10310000 	.word	0x10310000
 800191c:	10220000 	.word	0x10220000
 8001920:	10210000 	.word	0x10210000
 8001924:	10120000 	.word	0x10120000
 8001928:	10110000 	.word	0x10110000
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40011000 	.word	0x40011000
 8001940:	40011400 	.word	0x40011400
 8001944:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001948:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <HAL_GPIO_Init+0x304>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	43db      	mvns	r3, r3
 8001950:	4909      	ldr	r1, [pc, #36]	; (8001978 <HAL_GPIO_Init+0x304>)
 8001952:	4013      	ands	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	3301      	adds	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	f47f ae8e 	bne.w	8001688 <HAL_GPIO_Init+0x14>
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	372c      	adds	r7, #44	; 0x2c
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001998:	e003      	b.n	80019a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	041a      	lsls	r2, r3, #16
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e12b      	b.n	8001c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7fe ff64 	bl	80008a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a10:	f001 fbca 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8001a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a81      	ldr	r2, [pc, #516]	; (8001c20 <HAL_I2C_Init+0x274>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d807      	bhi.n	8001a30 <HAL_I2C_Init+0x84>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4a80      	ldr	r2, [pc, #512]	; (8001c24 <HAL_I2C_Init+0x278>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	bf94      	ite	ls
 8001a28:	2301      	movls	r3, #1
 8001a2a:	2300      	movhi	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e006      	b.n	8001a3e <HAL_I2C_Init+0x92>
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a7d      	ldr	r2, [pc, #500]	; (8001c28 <HAL_I2C_Init+0x27c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	bf94      	ite	ls
 8001a38:	2301      	movls	r3, #1
 8001a3a:	2300      	movhi	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e0e7      	b.n	8001c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4a78      	ldr	r2, [pc, #480]	; (8001c2c <HAL_I2C_Init+0x280>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0c9b      	lsrs	r3, r3, #18
 8001a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6a1b      	ldr	r3, [r3, #32]
 8001a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a6a      	ldr	r2, [pc, #424]	; (8001c20 <HAL_I2C_Init+0x274>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d802      	bhi.n	8001a80 <HAL_I2C_Init+0xd4>
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	e009      	b.n	8001a94 <HAL_I2C_Init+0xe8>
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a86:	fb02 f303 	mul.w	r3, r2, r3
 8001a8a:	4a69      	ldr	r2, [pc, #420]	; (8001c30 <HAL_I2C_Init+0x284>)
 8001a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a90:	099b      	lsrs	r3, r3, #6
 8001a92:	3301      	adds	r3, #1
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	495c      	ldr	r1, [pc, #368]	; (8001c20 <HAL_I2C_Init+0x274>)
 8001ab0:	428b      	cmp	r3, r1
 8001ab2:	d819      	bhi.n	8001ae8 <HAL_I2C_Init+0x13c>
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1e59      	subs	r1, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ac2:	1c59      	adds	r1, r3, #1
 8001ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ac8:	400b      	ands	r3, r1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00a      	beq.n	8001ae4 <HAL_I2C_Init+0x138>
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1e59      	subs	r1, r3, #1
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001adc:	3301      	adds	r3, #1
 8001ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ae2:	e051      	b.n	8001b88 <HAL_I2C_Init+0x1dc>
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	e04f      	b.n	8001b88 <HAL_I2C_Init+0x1dc>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d111      	bne.n	8001b14 <HAL_I2C_Init+0x168>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1e58      	subs	r0, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	440b      	add	r3, r1
 8001afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b02:	3301      	adds	r3, #1
 8001b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	bf0c      	ite	eq
 8001b0c:	2301      	moveq	r3, #1
 8001b0e:	2300      	movne	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e012      	b.n	8001b3a <HAL_I2C_Init+0x18e>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1e58      	subs	r0, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	0099      	lsls	r1, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Init+0x196>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e022      	b.n	8001b88 <HAL_I2C_Init+0x1dc>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10e      	bne.n	8001b68 <HAL_I2C_Init+0x1bc>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1e58      	subs	r0, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6859      	ldr	r1, [r3, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	440b      	add	r3, r1
 8001b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b66:	e00f      	b.n	8001b88 <HAL_I2C_Init+0x1dc>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1e58      	subs	r0, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	0099      	lsls	r1, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b88:	6879      	ldr	r1, [r7, #4]
 8001b8a:	6809      	ldr	r1, [r1, #0]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6911      	ldr	r1, [r2, #16]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68d2      	ldr	r2, [r2, #12]
 8001bc2:	4311      	orrs	r1, r2
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0201 	orr.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	000186a0 	.word	0x000186a0
 8001c24:	001e847f 	.word	0x001e847f
 8001c28:	003d08ff 	.word	0x003d08ff
 8001c2c:	431bde83 	.word	0x431bde83
 8001c30:	10624dd3 	.word	0x10624dd3

08001c34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	460b      	mov	r3, r1
 8001c42:	817b      	strh	r3, [r7, #10]
 8001c44:	4613      	mov	r3, r2
 8001c46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c48:	f7fe ffd2 	bl	8000bf0 <HAL_GetTick>
 8001c4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	f040 80e0 	bne.w	8001e1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2319      	movs	r3, #25
 8001c62:	2201      	movs	r2, #1
 8001c64:	4970      	ldr	r1, [pc, #448]	; (8001e28 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 fc9e 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
 8001c74:	e0d3      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_I2C_Master_Transmit+0x50>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e0cc      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d007      	beq.n	8001caa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f042 0201 	orr.w	r2, r2, #1
 8001ca8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2221      	movs	r2, #33	; 0x21
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	893a      	ldrh	r2, [r7, #8]
 8001cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <HAL_I2C_Master_Transmit+0x1f8>)
 8001cea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cec:	8979      	ldrh	r1, [r7, #10]
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	6a3a      	ldr	r2, [r7, #32]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 fb08 	bl	8002308 <I2C_MasterRequestWrite>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e08d      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	695b      	ldr	r3, [r3, #20]
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d18:	e066      	b.n	8001de8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	6a39      	ldr	r1, [r7, #32]
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 fd5c 	bl	80027dc <I2C_WaitOnTXEFlagUntilTimeout>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00d      	beq.n	8001d46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d107      	bne.n	8001d42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e06b      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	781a      	ldrb	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	695b      	ldr	r3, [r3, #20]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d11b      	bne.n	8001dbc <HAL_I2C_Master_Transmit+0x188>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d017      	beq.n	8001dbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	6a39      	ldr	r1, [r7, #32]
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fd53 	bl	800286c <I2C_WaitOnBTFFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00d      	beq.n	8001de8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d107      	bne.n	8001de4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001de2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e01a      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d194      	bne.n	8001d1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e000      	b.n	8001e1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e1c:	2302      	movs	r3, #2
  }
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	00100002 	.word	0x00100002
 8001e2c:	ffff0000 	.word	0xffff0000

08001e30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b08c      	sub	sp, #48	; 0x30
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	817b      	strh	r3, [r7, #10]
 8001e40:	4613      	mov	r3, r2
 8001e42:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7fe fed2 	bl	8000bf0 <HAL_GetTick>
 8001e4c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	f040 824b 	bne.w	80022f2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	2319      	movs	r3, #25
 8001e62:	2201      	movs	r2, #1
 8001e64:	497f      	ldr	r1, [pc, #508]	; (8002064 <HAL_I2C_Master_Receive+0x234>)
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fb9e 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
 8001e74:	e23e      	b.n	80022f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_I2C_Master_Receive+0x54>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e237      	b.n	80022f4 <HAL_I2C_Master_Receive+0x4c4>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d007      	beq.n	8001eaa <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2222      	movs	r2, #34	; 0x22
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2210      	movs	r2, #16
 8001ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	893a      	ldrh	r2, [r7, #8]
 8001eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	4a5f      	ldr	r2, [pc, #380]	; (8002068 <HAL_I2C_Master_Receive+0x238>)
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001eec:	8979      	ldrh	r1, [r7, #10]
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 fa8a 	bl	800240c <I2C_MasterRequestRead>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e1f8      	b.n	80022f4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d113      	bne.n	8001f32 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	61fb      	str	r3, [r7, #28]
 8001f1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e1cc      	b.n	80022cc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d11e      	bne.n	8001f78 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4a:	b672      	cpsid	i
}
 8001f4c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	61bb      	str	r3, [r7, #24]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	61bb      	str	r3, [r7, #24]
 8001f62:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f74:	b662      	cpsie	i
}
 8001f76:	e035      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d11e      	bne.n	8001fbe <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f8e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	617b      	str	r3, [r7, #20]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fba:	b662      	cpsie	i
}
 8001fbc:	e012      	b.n	8001fe4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001fe4:	e172      	b.n	80022cc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fea:	2b03      	cmp	r3, #3
 8001fec:	f200 811f 	bhi.w	800222e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d123      	bne.n	8002040 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ffa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 fc7d 	bl	80028fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e173      	b.n	80022f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	3b01      	subs	r3, #1
 800202a:	b29a      	uxth	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002034:	b29b      	uxth	r3, r3
 8002036:	3b01      	subs	r3, #1
 8002038:	b29a      	uxth	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800203e:	e145      	b.n	80022cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	2b02      	cmp	r3, #2
 8002046:	d152      	bne.n	80020ee <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	2200      	movs	r2, #0
 8002050:	4906      	ldr	r1, [pc, #24]	; (800206c <HAL_I2C_Master_Receive+0x23c>)
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 faa8 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d008      	beq.n	8002070 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e148      	b.n	80022f4 <HAL_I2C_Master_Receive+0x4c4>
 8002062:	bf00      	nop
 8002064:	00100002 	.word	0x00100002
 8002068:	ffff0000 	.word	0xffff0000
 800206c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002070:	b672      	cpsid	i
}
 8002072:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80020b6:	b662      	cpsie	i
}
 80020b8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d6:	3b01      	subs	r3, #1
 80020d8:	b29a      	uxth	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ec:	e0ee      	b.n	80022cc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f4:	2200      	movs	r2, #0
 80020f6:	4981      	ldr	r1, [pc, #516]	; (80022fc <HAL_I2C_Master_Receive+0x4cc>)
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 fa55 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0f5      	b.n	80022f4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002116:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002118:	b672      	cpsid	i
}
 800211a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002144:	b29b      	uxth	r3, r3
 8002146:	3b01      	subs	r3, #1
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800214e:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <HAL_I2C_Master_Receive+0x4d0>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	08db      	lsrs	r3, r3, #3
 8002154:	4a6b      	ldr	r2, [pc, #428]	; (8002304 <HAL_I2C_Master_Receive+0x4d4>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0a1a      	lsrs	r2, r3, #8
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	00da      	lsls	r2, r3, #3
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	3b01      	subs	r3, #1
 800216c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800216e:	6a3b      	ldr	r3, [r7, #32]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d118      	bne.n	80021a6 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2220      	movs	r2, #32
 800217e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002196:	b662      	cpsie	i
}
 8002198:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e0a6      	b.n	80022f4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	2b04      	cmp	r3, #4
 80021b2:	d1d9      	bne.n	8002168 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021f6:	b662      	cpsie	i
}
 80021f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800222c:	e04e      	b.n	80022cc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fb62 	bl	80028fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e058      	b.n	80022f4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b04      	cmp	r3, #4
 8002280:	d124      	bne.n	80022cc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	2b03      	cmp	r3, #3
 8002288:	d107      	bne.n	800229a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002298:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f47f ae88 	bne.w	8001fe6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	00010004 	.word	0x00010004
 8002300:	20000000 	.word	0x20000000
 8002304:	14f8b589 	.word	0x14f8b589

08002308 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	460b      	mov	r3, r1
 8002316:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	2b08      	cmp	r3, #8
 8002322:	d006      	beq.n	8002332 <I2C_MasterRequestWrite+0x2a>
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d003      	beq.n	8002332 <I2C_MasterRequestWrite+0x2a>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002330:	d108      	bne.n	8002344 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	e00b      	b.n	800235c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	2b12      	cmp	r3, #18
 800234a:	d107      	bne.n	800235c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f91d 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00d      	beq.n	8002390 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002382:	d103      	bne.n	800238c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e035      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002398:	d108      	bne.n	80023ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800239a:	897b      	ldrh	r3, [r7, #10]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023a8:	611a      	str	r2, [r3, #16]
 80023aa:	e01b      	b.n	80023e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023ac:	897b      	ldrh	r3, [r7, #10]
 80023ae:	11db      	asrs	r3, r3, #7
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f003 0306 	and.w	r3, r3, #6
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	f063 030f 	orn	r3, r3, #15
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <I2C_MasterRequestWrite+0xfc>)
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f966 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e010      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023da:	897b      	ldrh	r3, [r7, #10]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	4907      	ldr	r1, [pc, #28]	; (8002408 <I2C_MasterRequestWrite+0x100>)
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 f956 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	00010008 	.word	0x00010008
 8002408:	00010002 	.word	0x00010002

0800240c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	460b      	mov	r3, r1
 800241a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002430:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d006      	beq.n	8002446 <I2C_MasterRequestRead+0x3a>
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d003      	beq.n	8002446 <I2C_MasterRequestRead+0x3a>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002444:	d108      	bne.n	8002458 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	e00b      	b.n	8002470 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	2b11      	cmp	r3, #17
 800245e:	d107      	bne.n	8002470 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f893 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00d      	beq.n	80024a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002496:	d103      	bne.n	80024a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e079      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024ac:	d108      	bne.n	80024c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	e05f      	b.n	8002580 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024c0:	897b      	ldrh	r3, [r7, #10]
 80024c2:	11db      	asrs	r3, r3, #7
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0306 	and.w	r3, r3, #6
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	f063 030f 	orn	r3, r3, #15
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4930      	ldr	r1, [pc, #192]	; (80025a0 <I2C_MasterRequestRead+0x194>)
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f8dc 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e054      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ee:	897b      	ldrh	r3, [r7, #10]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4929      	ldr	r1, [pc, #164]	; (80025a4 <I2C_MasterRequestRead+0x198>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 f8cc 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e044      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002532:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f831 	bl	80025a8 <I2C_WaitOnFlagUntilTimeout>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00d      	beq.n	8002568 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255a:	d103      	bne.n	8002564 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e017      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002568:	897b      	ldrh	r3, [r7, #10]
 800256a:	11db      	asrs	r3, r3, #7
 800256c:	b2db      	uxtb	r3, r3
 800256e:	f003 0306 	and.w	r3, r3, #6
 8002572:	b2db      	uxtb	r3, r3
 8002574:	f063 030e 	orn	r3, r3, #14
 8002578:	b2da      	uxtb	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <I2C_MasterRequestRead+0x198>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f000 f888 	bl	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	00010008 	.word	0x00010008
 80025a4:	00010002 	.word	0x00010002

080025a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b8:	e048      	b.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025c0:	d044      	beq.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7fe fb15 	bl	8000bf0 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d139      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	0c1b      	lsrs	r3, r3, #16
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d10d      	bne.n	80025fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	4013      	ands	r3, r2
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	e00c      	b.n	8002618 <I2C_WaitOnFlagUntilTimeout+0x70>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	43da      	mvns	r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	4013      	ands	r3, r2
 800260a:	b29b      	uxth	r3, r3
 800260c:	2b00      	cmp	r3, #0
 800260e:	bf0c      	ite	eq
 8002610:	2301      	moveq	r3, #1
 8002612:	2300      	movne	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	461a      	mov	r2, r3
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	429a      	cmp	r2, r3
 800261c:	d116      	bne.n	800264c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f043 0220 	orr.w	r2, r3, #32
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e023      	b.n	8002694 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10d      	bne.n	8002672 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	43da      	mvns	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4013      	ands	r3, r2
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf0c      	ite	eq
 8002668:	2301      	moveq	r3, #1
 800266a:	2300      	movne	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	e00c      	b.n	800268c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	43da      	mvns	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	4013      	ands	r3, r2
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	429a      	cmp	r2, r3
 8002690:	d093      	beq.n	80025ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026aa:	e071      	b.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026ba:	d123      	bne.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f043 0204 	orr.w	r2, r3, #4
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e067      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270a:	d041      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270c:	f7fe fa70 	bl	8000bf0 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	d302      	bcc.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d136      	bne.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	0c1b      	lsrs	r3, r3, #16
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b01      	cmp	r3, #1
 800272a:	d10c      	bne.n	8002746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	43da      	mvns	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4013      	ands	r3, r2
 8002738:	b29b      	uxth	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	bf14      	ite	ne
 800273e:	2301      	movne	r3, #1
 8002740:	2300      	moveq	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e00b      	b.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	43da      	mvns	r2, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	4013      	ands	r3, r2
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2220      	movs	r2, #32
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	f043 0220 	orr.w	r2, r3, #32
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e021      	b.n	80027d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	0c1b      	lsrs	r3, r3, #16
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	d10c      	bne.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695b      	ldr	r3, [r3, #20]
 80027a0:	43da      	mvns	r2, r3
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	4013      	ands	r3, r2
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	e00b      	b.n	80027cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	43da      	mvns	r2, r3
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f47f af6d 	bne.w	80026ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	e034      	b.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f8e3 	bl	80029b6 <I2C_IsAcknowledgeFailed>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e034      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d028      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002802:	f7fe f9f5 	bl	8000bf0 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	d302      	bcc.n	8002818 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11d      	bne.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	695b      	ldr	r3, [r3, #20]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d016      	beq.n	8002854 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e007      	b.n	8002864 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285e:	2b80      	cmp	r3, #128	; 0x80
 8002860:	d1c3      	bne.n	80027ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002878:	e034      	b.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f89b 	bl	80029b6 <I2C_IsAcknowledgeFailed>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e034      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002890:	d028      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002892:	f7fe f9ad 	bl	8000bf0 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d302      	bcc.n	80028a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d11d      	bne.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d016      	beq.n	80028e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f043 0220 	orr.w	r2, r3, #32
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d1c3      	bne.n	800287a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002908:	e049      	b.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0310 	and.w	r3, r3, #16
 8002914:	2b10      	cmp	r3, #16
 8002916:	d119      	bne.n	800294c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0210 	mvn.w	r2, #16
 8002920:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e030      	b.n	80029ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294c:	f7fe f950 	bl	8000bf0 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d11d      	bne.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d016      	beq.n	800299e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e007      	b.n	80029ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d1ae      	bne.n	800290a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029cc:	d11b      	bne.n	8002a06 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2220      	movs	r2, #32
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e000      	b.n	8002a08 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e272      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8087 	beq.w	8002b42 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a34:	4b92      	ldr	r3, [pc, #584]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d00c      	beq.n	8002a5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a40:	4b8f      	ldr	r3, [pc, #572]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b08      	cmp	r3, #8
 8002a4a:	d112      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5e>
 8002a4c:	4b8c      	ldr	r3, [pc, #560]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a58:	d10b      	bne.n	8002a72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5a:	4b89      	ldr	r3, [pc, #548]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d06c      	beq.n	8002b40 <HAL_RCC_OscConfig+0x12c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d168      	bne.n	8002b40 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e24c      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x76>
 8002a7c:	4b80      	ldr	r3, [pc, #512]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a7f      	ldr	r2, [pc, #508]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e02e      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x98>
 8002a92:	4b7b      	ldr	r3, [pc, #492]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a7a      	ldr	r2, [pc, #488]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a77      	ldr	r2, [pc, #476]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e01d      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0xbc>
 8002ab6:	4b72      	ldr	r3, [pc, #456]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a71      	ldr	r2, [pc, #452]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac0:	6013      	str	r3, [r2, #0]
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002ad0:	4b6b      	ldr	r3, [pc, #428]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a6a      	ldr	r2, [pc, #424]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a67      	ldr	r2, [pc, #412]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d013      	beq.n	8002b18 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe f87e 	bl	8000bf0 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af8:	f7fe f87a 	bl	8000bf0 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b64      	cmp	r3, #100	; 0x64
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e200      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b5d      	ldr	r3, [pc, #372]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0xe4>
 8002b16:	e014      	b.n	8002b42 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b18:	f7fe f86a 	bl	8000bf0 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe f866 	bl	8000bf0 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	; 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e1ec      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b32:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x10c>
 8002b3e:	e000      	b.n	8002b42 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4e:	4b4c      	ldr	r3, [pc, #304]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b5a:	4b49      	ldr	r3, [pc, #292]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d11c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x18c>
 8002b66:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d116      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_RCC_OscConfig+0x176>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c0      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4939      	ldr	r1, [pc, #228]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9e:	e03a      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d020      	beq.n	8002bea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba8:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe f81f 	bl	8000bf0 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb6:	f7fe f81b 	bl	8000bf0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e1a1      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0302 	and.w	r3, r3, #2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd4:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4927      	ldr	r1, [pc, #156]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	600b      	str	r3, [r1, #0]
 8002be8:	e015      	b.n	8002c16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <HAL_RCC_OscConfig+0x270>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fd fffe 	bl	8000bf0 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf8:	f7fd fffa 	bl	8000bf0 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e180      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d03a      	beq.n	8002c98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c30:	f7fd ffde 	bl	8000bf0 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c38:	f7fd ffda 	bl	8000bf0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e160      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0f0      	beq.n	8002c38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c56:	2001      	movs	r0, #1
 8002c58:	f000 fafe 	bl	8003258 <RCC_Delay>
 8002c5c:	e01c      	b.n	8002c98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	; (8002c88 <HAL_RCC_OscConfig+0x274>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c64:	f7fd ffc4 	bl	8000bf0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c6a:	e00f      	b.n	8002c8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6c:	f7fd ffc0 	bl	8000bf0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d908      	bls.n	8002c8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e146      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
 8002c7e:	bf00      	nop
 8002c80:	40021000 	.word	0x40021000
 8002c84:	42420000 	.word	0x42420000
 8002c88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	4b92      	ldr	r3, [pc, #584]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e9      	bne.n	8002c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 80a6 	beq.w	8002df2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002caa:	4b8b      	ldr	r3, [pc, #556]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb6:	4b88      	ldr	r3, [pc, #544]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4a87      	ldr	r2, [pc, #540]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	61d3      	str	r3, [r2, #28]
 8002cc2:	4b85      	ldr	r3, [pc, #532]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd2:	4b82      	ldr	r3, [pc, #520]	; (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d118      	bne.n	8002d10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cde:	4b7f      	ldr	r3, [pc, #508]	; (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a7e      	ldr	r2, [pc, #504]	; (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cea:	f7fd ff81 	bl	8000bf0 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf2:	f7fd ff7d 	bl	8000bf0 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b64      	cmp	r3, #100	; 0x64
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e103      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d04:	4b75      	ldr	r3, [pc, #468]	; (8002edc <HAL_RCC_OscConfig+0x4c8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0f0      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x312>
 8002d18:	4b6f      	ldr	r3, [pc, #444]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4a6e      	ldr	r2, [pc, #440]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	6213      	str	r3, [r2, #32]
 8002d24:	e02d      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x334>
 8002d2e:	4b6a      	ldr	r3, [pc, #424]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a69      	ldr	r2, [pc, #420]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4b67      	ldr	r3, [pc, #412]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a66      	ldr	r2, [pc, #408]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
 8002d46:	e01c      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d10c      	bne.n	8002d6a <HAL_RCC_OscConfig+0x356>
 8002d50:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	4a60      	ldr	r2, [pc, #384]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d56:	f043 0304 	orr.w	r3, r3, #4
 8002d5a:	6213      	str	r3, [r2, #32]
 8002d5c:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4a5d      	ldr	r2, [pc, #372]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	6213      	str	r3, [r2, #32]
 8002d68:	e00b      	b.n	8002d82 <HAL_RCC_OscConfig+0x36e>
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a5a      	ldr	r2, [pc, #360]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0301 	bic.w	r3, r3, #1
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	4b58      	ldr	r3, [pc, #352]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4a57      	ldr	r2, [pc, #348]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f023 0304 	bic.w	r3, r3, #4
 8002d80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d015      	beq.n	8002db6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8a:	f7fd ff31 	bl	8000bf0 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7fd ff2d 	bl	8000bf0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e0b1      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da8:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ee      	beq.n	8002d92 <HAL_RCC_OscConfig+0x37e>
 8002db4:	e014      	b.n	8002de0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fd ff1b 	bl	8000bf0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dbe:	f7fd ff17 	bl	8000bf0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e09b      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd4:	4b40      	ldr	r3, [pc, #256]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1ee      	bne.n	8002dbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002de0:	7dfb      	ldrb	r3, [r7, #23]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d105      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b3c      	ldr	r3, [pc, #240]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	4a3b      	ldr	r2, [pc, #236]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69db      	ldr	r3, [r3, #28]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 8087 	beq.w	8002f0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dfc:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 030c 	and.w	r3, r3, #12
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d061      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d146      	bne.n	8002e9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fd feeb 	bl	8000bf0 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e1c:	e008      	b.n	8002e30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1e:	f7fd fee7 	bl	8000bf0 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d901      	bls.n	8002e30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e06d      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e30:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1f0      	bne.n	8002e1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d108      	bne.n	8002e58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4921      	ldr	r1, [pc, #132]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e58:	4b1f      	ldr	r3, [pc, #124]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a19      	ldr	r1, [r3, #32]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	491b      	ldr	r1, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fd febb 	bl	8000bf0 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fd feb7 	bl	8000bf0 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e03d      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x46a>
 8002e9c:	e035      	b.n	8002f0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_RCC_OscConfig+0x4cc>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea4:	f7fd fea4 	bl	8000bf0 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fd fea0 	bl	8000bf0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e026      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_OscConfig+0x4c4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x498>
 8002eca:	e01e      	b.n	8002f0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e019      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <HAL_RCC_OscConfig+0x500>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0d0      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d910      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 0207 	bic.w	r2, r3, #7
 8002f42:	4965      	ldr	r1, [pc, #404]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0b8      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f74:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	4a58      	ldr	r2, [pc, #352]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d005      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f8c:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	4a52      	ldr	r2, [pc, #328]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f98:	4b50      	ldr	r3, [pc, #320]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	494d      	ldr	r1, [pc, #308]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d040      	beq.n	8003038 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d107      	bne.n	8002fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbe:	4b47      	ldr	r3, [pc, #284]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d115      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e07f      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d107      	bne.n	8002fe6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e073      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e06b      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff6:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f023 0203 	bic.w	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4936      	ldr	r1, [pc, #216]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003008:	f7fd fdf2 	bl	8000bf0 <HAL_GetTick>
 800300c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300e:	e00a      	b.n	8003026 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003010:	f7fd fdee 	bl	8000bf0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e053      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003026:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 020c 	and.w	r2, r3, #12
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	429a      	cmp	r2, r3
 8003036:	d1eb      	bne.n	8003010 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003038:	4b27      	ldr	r3, [pc, #156]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d210      	bcs.n	8003068 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 0207 	bic.w	r2, r3, #7
 800304e:	4922      	ldr	r1, [pc, #136]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e032      	b.n	80030ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d008      	beq.n	8003086 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003074:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4916      	ldr	r1, [pc, #88]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003082:	4313      	orrs	r3, r2
 8003084:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003092:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	490e      	ldr	r1, [pc, #56]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a6:	f000 f821 	bl	80030ec <HAL_RCC_GetSysClockFreq>
 80030aa:	4602      	mov	r2, r0
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	091b      	lsrs	r3, r3, #4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	490a      	ldr	r1, [pc, #40]	; (80030e0 <HAL_RCC_ClockConfig+0x1c8>)
 80030b8:	5ccb      	ldrb	r3, [r1, r3]
 80030ba:	fa22 f303 	lsr.w	r3, r2, r3
 80030be:	4a09      	ldr	r2, [pc, #36]	; (80030e4 <HAL_RCC_ClockConfig+0x1cc>)
 80030c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030c2:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1d0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fc76 	bl	80009b8 <HAL_InitTick>

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40022000 	.word	0x40022000
 80030dc:	40021000 	.word	0x40021000
 80030e0:	08005dbc 	.word	0x08005dbc
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000004 	.word	0x20000004

080030ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	2300      	movs	r3, #0
 80030f8:	60bb      	str	r3, [r7, #8]
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	2300      	movs	r3, #0
 8003100:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003106:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_RCC_GetSysClockFreq+0x94>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	2b04      	cmp	r3, #4
 8003114:	d002      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x30>
 8003116:	2b08      	cmp	r3, #8
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0x36>
 800311a:	e027      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_GetSysClockFreq+0x98>)
 800311e:	613b      	str	r3, [r7, #16]
      break;
 8003120:	e027      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	0c9b      	lsrs	r3, r3, #18
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	4a17      	ldr	r2, [pc, #92]	; (8003188 <HAL_RCC_GetSysClockFreq+0x9c>)
 800312c:	5cd3      	ldrb	r3, [r2, r3]
 800312e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d010      	beq.n	800315c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <HAL_RCC_GetSysClockFreq+0x94>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	0c5b      	lsrs	r3, r3, #17
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	4a11      	ldr	r2, [pc, #68]	; (800318c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <HAL_RCC_GetSysClockFreq+0x98>)
 800314e:	fb03 f202 	mul.w	r2, r3, r2
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e004      	b.n	8003166 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a0c      	ldr	r2, [pc, #48]	; (8003190 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003160:	fb02 f303 	mul.w	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	613b      	str	r3, [r7, #16]
      break;
 800316a:	e002      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_RCC_GetSysClockFreq+0x98>)
 800316e:	613b      	str	r3, [r7, #16]
      break;
 8003170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003172:	693b      	ldr	r3, [r7, #16]
}
 8003174:	4618      	mov	r0, r3
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	bc80      	pop	{r7}
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	007a1200 	.word	0x007a1200
 8003188:	08005dd4 	.word	0x08005dd4
 800318c:	08005de4 	.word	0x08005de4
 8003190:	003d0900 	.word	0x003d0900

08003194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b02      	ldr	r3, [pc, #8]	; (80031a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	20000000 	.word	0x20000000

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031ac:	f7ff fff2 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	0a1b      	lsrs	r3, r3, #8
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40021000 	.word	0x40021000
 80031cc:	08005dcc 	.word	0x08005dcc

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031d4:	f7ff ffde 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	0adb      	lsrs	r3, r3, #11
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40021000 	.word	0x40021000
 80031f4:	08005dcc 	.word	0x08005dcc

080031f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	220f      	movs	r2, #15
 8003206:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003208:	4b11      	ldr	r3, [pc, #68]	; (8003250 <HAL_RCC_GetClockConfig+0x58>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 0203 	and.w	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_RCC_GetClockConfig+0x58>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_GetClockConfig+0x58>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_RCC_GetClockConfig+0x58>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	08db      	lsrs	r3, r3, #3
 8003232:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_RCC_GetClockConfig+0x5c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0207 	and.w	r2, r3, #7
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	40021000 	.word	0x40021000
 8003254:	40022000 	.word	0x40022000

08003258 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <RCC_Delay+0x34>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <RCC_Delay+0x38>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	0a5b      	lsrs	r3, r3, #9
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003274:	bf00      	nop
  }
  while (Delay --);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1e5a      	subs	r2, r3, #1
 800327a:	60fa      	str	r2, [r7, #12]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f9      	bne.n	8003274 <RCC_Delay+0x1c>
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	bc80      	pop	{r7}
 800328a:	4770      	bx	lr
 800328c:	20000000 	.word	0x20000000
 8003290:	10624dd3 	.word	0x10624dd3

08003294 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d07d      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032b0:	2300      	movs	r3, #0
 80032b2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b4:	4b4f      	ldr	r3, [pc, #316]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c0:	4b4c      	ldr	r3, [pc, #304]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	4a4b      	ldr	r2, [pc, #300]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ca:	61d3      	str	r3, [r2, #28]
 80032cc:	4b49      	ldr	r3, [pc, #292]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d8:	2301      	movs	r3, #1
 80032da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d118      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e8:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a42      	ldr	r2, [pc, #264]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f4:	f7fd fc7c 	bl	8000bf0 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fa:	e008      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fc:	f7fd fc78 	bl	8000bf0 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b64      	cmp	r3, #100	; 0x64
 8003308:	d901      	bls.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e06d      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330e:	4b3a      	ldr	r3, [pc, #232]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800331a:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d02e      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	d027      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003338:	4b2e      	ldr	r3, [pc, #184]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003340:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003342:	4b2e      	ldr	r3, [pc, #184]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003344:	2201      	movs	r2, #1
 8003346:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003348:	4b2c      	ldr	r3, [pc, #176]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800334e:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	d014      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fd fc47 	bl	8000bf0 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003366:	f7fd fc43 	bl	8000bf0 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f241 3288 	movw	r2, #5000	; 0x1388
 8003374:	4293      	cmp	r3, r2
 8003376:	d901      	bls.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e036      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337c:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4917      	ldr	r1, [pc, #92]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003396:	4313      	orrs	r3, r2
 8003398:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800339a:	7dfb      	ldrb	r3, [r7, #23]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d105      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	490b      	ldr	r1, [pc, #44]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4904      	ldr	r1, [pc, #16]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40007000 	.word	0x40007000
 80033fc:	42420440 	.word	0x42420440

08003400 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b088      	sub	sp, #32
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	2300      	movs	r3, #0
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	2300      	movs	r3, #0
 8003412:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b10      	cmp	r3, #16
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b10      	cmp	r3, #16
 8003426:	f200 808a 	bhi.w	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d045      	beq.n	80034bc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d075      	beq.n	8003522 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003436:	e082      	b.n	800353e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003438:	4b46      	ldr	r3, [pc, #280]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800343e:	4b45      	ldr	r3, [pc, #276]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d07b      	beq.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	0c9b      	lsrs	r3, r3, #18
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4a41      	ldr	r2, [pc, #260]	; (8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003454:	5cd3      	ldrb	r3, [r2, r3]
 8003456:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d015      	beq.n	800348e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003462:	4b3c      	ldr	r3, [pc, #240]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	0c5b      	lsrs	r3, r3, #17
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	4a3b      	ldr	r2, [pc, #236]	; (800355c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800346e:	5cd3      	ldrb	r3, [r2, r3]
 8003470:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800347c:	4a38      	ldr	r2, [pc, #224]	; (8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fbb2 f2f3 	udiv	r2, r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	fb02 f303 	mul.w	r3, r2, r3
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	e004      	b.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4a34      	ldr	r2, [pc, #208]	; (8003564 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003498:	4b2e      	ldr	r3, [pc, #184]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a4:	d102      	bne.n	80034ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	61bb      	str	r3, [r7, #24]
      break;
 80034aa:	e04a      	b.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4a2d      	ldr	r2, [pc, #180]	; (8003568 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	61bb      	str	r3, [r7, #24]
      break;
 80034ba:	e042      	b.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034cc:	d108      	bne.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d003      	beq.n	80034e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80034d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034dc:	61bb      	str	r3, [r7, #24]
 80034de:	e01f      	b.n	8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ea:	d109      	bne.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80034ec:	4b19      	ldr	r3, [pc, #100]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80034f8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	e00f      	b.n	8003520 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800350a:	d11c      	bne.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d016      	beq.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003518:	f24f 4324 	movw	r3, #62500	; 0xf424
 800351c:	61bb      	str	r3, [r7, #24]
      break;
 800351e:	e012      	b.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003520:	e011      	b.n	8003546 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003522:	f7ff fe55 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0b9b      	lsrs	r3, r3, #14
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fbb2 f3f3 	udiv	r3, r2, r3
 800353a:	61bb      	str	r3, [r7, #24]
      break;
 800353c:	e004      	b.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800353e:	bf00      	nop
 8003540:	e002      	b.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003546:	bf00      	nop
    }
  }
  return (frequency);
 8003548:	69bb      	ldr	r3, [r7, #24]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3720      	adds	r7, #32
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40021000 	.word	0x40021000
 8003558:	08005de8 	.word	0x08005de8
 800355c:	08005df8 	.word	0x08005df8
 8003560:	007a1200 	.word	0x007a1200
 8003564:	003d0900 	.word	0x003d0900
 8003568:	aaaaaaab 	.word	0xaaaaaaab

0800356c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e041      	b.n	8003602 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f839 	bl	800360a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	4619      	mov	r1, r3
 80035aa:	4610      	mov	r0, r2
 80035ac:	f000 f99c 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr

0800361c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d001      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e03a      	b.n	80036aa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0201 	orr.w	r2, r2, #1
 800364a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_TIM_Base_Start_IT+0x98>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00e      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x58>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800365e:	d009      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x58>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a14      	ldr	r2, [pc, #80]	; (80036b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d004      	beq.n	8003674 <HAL_TIM_Base_Start_IT+0x58>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a13      	ldr	r2, [pc, #76]	; (80036bc <HAL_TIM_Base_Start_IT+0xa0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d010      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003696:	e007      	b.n	80036a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	40012c00 	.word	0x40012c00
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800

080036c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0202 	mvn.w	r2, #2
 80036f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f8d1 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f8c4 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f8d3 	bl	80038c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	d020      	beq.n	8003770 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01b      	beq.n	8003770 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0204 	mvn.w	r2, #4
 8003740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f8ab 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 800375c:	e005      	b.n	800376a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f89e 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f000 f8ad 	bl	80038c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0308 	and.w	r3, r3, #8
 8003776:	2b00      	cmp	r3, #0
 8003778:	d020      	beq.n	80037bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d01b      	beq.n	80037bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0208 	mvn.w	r2, #8
 800378c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2204      	movs	r2, #4
 8003792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f885 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f878 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 f887 	bl	80038c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d020      	beq.n	8003808 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d01b      	beq.n	8003808 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0210 	mvn.w	r2, #16
 80037d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2208      	movs	r2, #8
 80037de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f85f 	bl	80038b2 <HAL_TIM_IC_CaptureCallback>
 80037f4:	e005      	b.n	8003802 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f852 	bl	80038a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f861 	bl	80038c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d007      	beq.n	800382c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0201 	mvn.w	r2, #1
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fc ffbe 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00c      	beq.n	8003850 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383c:	2b00      	cmp	r3, #0
 800383e:	d007      	beq.n	8003850 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f8c3 	bl	80039d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00c      	beq.n	8003874 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800386c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f831 	bl	80038d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00c      	beq.n	8003898 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0220 	mvn.w	r2, #32
 8003890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f896 	bl	80039c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a8:	bf00      	nop
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr

080038b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038ba:	bf00      	nop
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bc80      	pop	{r7}
 80038d4:	4770      	bx	lr

080038d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b083      	sub	sp, #12
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <TIM_Base_SetConfig+0xd0>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d00b      	beq.n	8003918 <TIM_Base_SetConfig+0x30>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d007      	beq.n	8003918 <TIM_Base_SetConfig+0x30>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <TIM_Base_SetConfig+0xd4>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_Base_SetConfig+0x30>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <TIM_Base_SetConfig+0xd8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d108      	bne.n	800392a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a22      	ldr	r2, [pc, #136]	; (80039b8 <TIM_Base_SetConfig+0xd0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d00b      	beq.n	800394a <TIM_Base_SetConfig+0x62>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003938:	d007      	beq.n	800394a <TIM_Base_SetConfig+0x62>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <TIM_Base_SetConfig+0xd4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x62>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a1e      	ldr	r2, [pc, #120]	; (80039c0 <TIM_Base_SetConfig+0xd8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a0d      	ldr	r2, [pc, #52]	; (80039b8 <TIM_Base_SetConfig+0xd0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]
  }
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	40012c00 	.word	0x40012c00
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800

080039c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e042      	b.n	8003a80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fc ff86 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68da      	ldr	r2, [r3, #12]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f971 	bl	8003d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	; 0x28
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d175      	bne.n	8003b94 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <HAL_UART_Transmit+0x2c>
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e06e      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2221      	movs	r2, #33	; 0x21
 8003ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ac6:	f7fd f893 	bl	8000bf0 <HAL_GetTick>
 8003aca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	88fa      	ldrh	r2, [r7, #6]
 8003ad0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	88fa      	ldrh	r2, [r7, #6]
 8003ad6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae0:	d108      	bne.n	8003af4 <HAL_UART_Transmit+0x6c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d104      	bne.n	8003af4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	e003      	b.n	8003afc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003afc:	e02e      	b.n	8003b5c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2200      	movs	r2, #0
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 f848 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e03a      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10b      	bne.n	8003b3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	3302      	adds	r3, #2
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	e007      	b.n	8003b4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1cb      	bne.n	8003afe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2140      	movs	r1, #64	; 0x40
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f814 	bl	8003b9e <UART_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d005      	beq.n	8003b88 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e006      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	e000      	b.n	8003b96 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003b94:	2302      	movs	r3, #2
  }
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3720      	adds	r7, #32
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	60f8      	str	r0, [r7, #12]
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	603b      	str	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bae:	e03b      	b.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d037      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb8:	f7fd f81a 	bl	8000bf0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e03a      	b.n	8003c48 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d023      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d020      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b40      	cmp	r3, #64	; 0x40
 8003bea:	d01d      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	2b08      	cmp	r3, #8
 8003bf8:	d116      	bne.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	617b      	str	r3, [r7, #20]
 8003c0e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f81d 	bl	8003c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2208      	movs	r2, #8
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e00f      	b.n	8003c48 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d0b4      	beq.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b095      	sub	sp, #84	; 0x54
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c62:	e853 3f00 	ldrex	r3, [r3]
 8003c66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c78:	643a      	str	r2, [r7, #64]	; 0x40
 8003c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c80:	e841 2300 	strex	r3, r2, [r1]
 8003c84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e5      	bne.n	8003c58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	e853 3f00 	ldrex	r3, [r3]
 8003c9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3314      	adds	r3, #20
 8003caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb4:	e841 2300 	strex	r3, r2, [r1]
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1e5      	bne.n	8003c8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d119      	bne.n	8003cfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	e853 3f00 	ldrex	r3, [r3]
 8003cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f023 0310 	bic.w	r3, r3, #16
 8003cde:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ce8:	61ba      	str	r2, [r7, #24]
 8003cea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	e841 2300 	strex	r3, r2, [r1]
 8003cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1e5      	bne.n	8003cc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d0a:	bf00      	nop
 8003d0c:	3754      	adds	r7, #84	; 0x54
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d4e:	f023 030c 	bic.w	r3, r3, #12
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	68b9      	ldr	r1, [r7, #8]
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a2c      	ldr	r2, [pc, #176]	; (8003e28 <UART_SetConfig+0x114>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d103      	bne.n	8003d84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003d7c:	f7ff fa28 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	e002      	b.n	8003d8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7ff fa10 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8003d88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009a      	lsls	r2, r3, #2
 8003d94:	441a      	add	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	4a22      	ldr	r2, [pc, #136]	; (8003e2c <UART_SetConfig+0x118>)
 8003da2:	fba2 2303 	umull	r2, r3, r2, r3
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	0119      	lsls	r1, r3, #4
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	009a      	lsls	r2, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <UART_SetConfig+0x118>)
 8003dc2:	fba3 0302 	umull	r0, r3, r3, r2
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	2064      	movs	r0, #100	; 0x64
 8003dca:	fb00 f303 	mul.w	r3, r0, r3
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	3332      	adds	r3, #50	; 0x32
 8003dd4:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <UART_SetConfig+0x118>)
 8003dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de0:	4419      	add	r1, r3
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009a      	lsls	r2, r3, #2
 8003dec:	441a      	add	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <UART_SetConfig+0x118>)
 8003dfa:	fba3 0302 	umull	r0, r3, r3, r2
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2064      	movs	r0, #100	; 0x64
 8003e02:	fb00 f303 	mul.w	r3, r0, r3
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	3332      	adds	r3, #50	; 0x32
 8003e0c:	4a07      	ldr	r2, [pc, #28]	; (8003e2c <UART_SetConfig+0x118>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	f003 020f 	and.w	r2, r3, #15
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e20:	bf00      	nop
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40013800 	.word	0x40013800
 8003e2c:	51eb851f 	.word	0x51eb851f

08003e30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e42:	2b84      	cmp	r3, #132	; 0x84
 8003e44:	d005      	beq.n	8003e52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3303      	adds	r3, #3
 8003e50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e62:	f000 faf1 	bl	8004448 <vTaskStartScheduler>
  
  return osOK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	b089      	sub	sp, #36	; 0x24
 8003e70:	af04      	add	r7, sp, #16
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d020      	beq.n	8003ec0 <osThreadCreate+0x54>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d01c      	beq.n	8003ec0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685c      	ldr	r4, [r3, #4]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691e      	ldr	r6, [r3, #16]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff ffc9 	bl	8003e30 <makeFreeRtosPriority>
 8003e9e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ea8:	9202      	str	r2, [sp, #8]
 8003eaa:	9301      	str	r3, [sp, #4]
 8003eac:	9100      	str	r1, [sp, #0]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	4632      	mov	r2, r6
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 f8e8 	bl	800408a <xTaskCreateStatic>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e01c      	b.n	8003efa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685c      	ldr	r4, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ecc:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7ff ffab 	bl	8003e30 <makeFreeRtosPriority>
 8003eda:	4602      	mov	r2, r0
 8003edc:	f107 030c 	add.w	r3, r7, #12
 8003ee0:	9301      	str	r3, [sp, #4]
 8003ee2:	9200      	str	r2, [sp, #0]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	4629      	mov	r1, r5
 8003eea:	4620      	mov	r0, r4
 8003eec:	f000 f92a 	bl	8004144 <xTaskCreate>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d001      	beq.n	8003efa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e000      	b.n	8003efc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003efa:	68fb      	ldr	r3, [r7, #12]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f04 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <osDelay+0x16>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	e000      	b.n	8003f1c <osDelay+0x18>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fa5f 	bl	80043e0 <vTaskDelay>
  
  return osOK;
 8003f22:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f103 0208 	add.w	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f04f 32ff 	mov.w	r2, #4294967295
 8003f44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f103 0208 	add.w	r2, r3, #8
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f103 0208 	add.w	r2, r3, #8
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f60:	bf00      	nop
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bc80      	pop	{r7}
 8003f80:	4770      	bx	lr

08003f82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d103      	bne.n	8003fe8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e00c      	b.n	8004002 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3308      	adds	r3, #8
 8003fec:	60fb      	str	r3, [r7, #12]
 8003fee:	e002      	b.n	8003ff6 <vListInsert+0x2e>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d2f6      	bcs.n	8003ff0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	1c5a      	adds	r2, r3, #1
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	601a      	str	r2, [r3, #0]
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	6892      	ldr	r2, [r2, #8]
 800404e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6852      	ldr	r2, [r2, #4]
 8004058:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	429a      	cmp	r2, r3
 8004062:	d103      	bne.n	800406c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	1e5a      	subs	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800408a:	b580      	push	{r7, lr}
 800408c:	b08e      	sub	sp, #56	; 0x38
 800408e:	af04      	add	r7, sp, #16
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10a      	bne.n	80040b4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80040b0:	bf00      	nop
 80040b2:	e7fe      	b.n	80040b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <xTaskCreateStatic+0x46>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	61fb      	str	r3, [r7, #28]
}
 80040cc:	bf00      	nop
 80040ce:	e7fe      	b.n	80040ce <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040d0:	23a0      	movs	r3, #160	; 0xa0
 80040d2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2ba0      	cmp	r3, #160	; 0xa0
 80040d8:	d00a      	beq.n	80040f0 <xTaskCreateStatic+0x66>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	61bb      	str	r3, [r7, #24]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01e      	beq.n	8004136 <xTaskCreateStatic+0xac>
 80040f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01b      	beq.n	8004136 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004106:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	2202      	movs	r2, #2
 800410c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004110:	2300      	movs	r3, #0
 8004112:	9303      	str	r3, [sp, #12]
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	9302      	str	r3, [sp, #8]
 8004118:	f107 0314 	add.w	r3, r7, #20
 800411c:	9301      	str	r3, [sp, #4]
 800411e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f851 	bl	80041d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800412e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004130:	f000 f8ec 	bl	800430c <prvAddNewTaskToReadyList>
 8004134:	e001      	b.n	800413a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800413a:	697b      	ldr	r3, [r7, #20]
	}
 800413c:	4618      	mov	r0, r3
 800413e:	3728      	adds	r7, #40	; 0x28
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08c      	sub	sp, #48	; 0x30
 8004148:	af04      	add	r7, sp, #16
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	4613      	mov	r3, r2
 8004152:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fe99 	bl	8004e90 <pvPortMalloc>
 800415e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00e      	beq.n	8004184 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004166:	20a0      	movs	r0, #160	; 0xa0
 8004168:	f000 fe92 	bl	8004e90 <pvPortMalloc>
 800416c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	697a      	ldr	r2, [r7, #20]
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
 800417a:	e005      	b.n	8004188 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800417c:	6978      	ldr	r0, [r7, #20]
 800417e:	f000 ff53 	bl	8005028 <vPortFree>
 8004182:	e001      	b.n	8004188 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004184:	2300      	movs	r3, #0
 8004186:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d017      	beq.n	80041be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	2300      	movs	r3, #0
 800419a:	9303      	str	r3, [sp, #12]
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	9302      	str	r3, [sp, #8]
 80041a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	68b9      	ldr	r1, [r7, #8]
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f000 f80f 	bl	80041d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041b2:	69f8      	ldr	r0, [r7, #28]
 80041b4:	f000 f8aa 	bl	800430c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041b8:	2301      	movs	r3, #1
 80041ba:	61bb      	str	r3, [r7, #24]
 80041bc:	e002      	b.n	80041c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
 80041c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041c4:	69bb      	ldr	r3, [r7, #24]
	}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
	...

080041d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b088      	sub	sp, #32
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041e8:	3b01      	subs	r3, #1
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	f023 0307 	bic.w	r3, r3, #7
 80041f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	617b      	str	r3, [r7, #20]
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01f      	beq.n	800425e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	e012      	b.n	800424a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	4413      	add	r3, r2
 800422a:	7819      	ldrb	r1, [r3, #0]
 800422c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	4413      	add	r3, r2
 8004232:	3334      	adds	r3, #52	; 0x34
 8004234:	460a      	mov	r2, r1
 8004236:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	4413      	add	r3, r2
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d006      	beq.n	8004252 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	3301      	adds	r3, #1
 8004248:	61fb      	str	r3, [r7, #28]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	2b0f      	cmp	r3, #15
 800424e:	d9e9      	bls.n	8004224 <prvInitialiseNewTask+0x54>
 8004250:	e000      	b.n	8004254 <prvInitialiseNewTask+0x84>
			{
				break;
 8004252:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800425c:	e003      	b.n	8004266 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800425e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004260:	2200      	movs	r2, #0
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004268:	2b06      	cmp	r3, #6
 800426a:	d901      	bls.n	8004270 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800426c:	2306      	movs	r3, #6
 800426e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004272:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004274:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800427a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	2200      	movs	r2, #0
 8004280:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	3304      	adds	r3, #4
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fe6f 	bl	8003f6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800428c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428e:	3318      	adds	r3, #24
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff fe6a 	bl	8003f6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800429c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800429e:	f1c3 0207 	rsb	r2, r3, #7
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ae:	2200      	movs	r2, #0
 80042b0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	334c      	adds	r3, #76	; 0x4c
 80042c0:	224c      	movs	r2, #76	; 0x4c
 80042c2:	2100      	movs	r1, #0
 80042c4:	4618      	mov	r0, r3
 80042c6:	f001 f81f 	bl	8005308 <memset>
 80042ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042cc:	4a0c      	ldr	r2, [pc, #48]	; (8004300 <prvInitialiseNewTask+0x130>)
 80042ce:	651a      	str	r2, [r3, #80]	; 0x50
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	4a0c      	ldr	r2, [pc, #48]	; (8004304 <prvInitialiseNewTask+0x134>)
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	4a0b      	ldr	r2, [pc, #44]	; (8004308 <prvInitialiseNewTask+0x138>)
 80042da:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	68f9      	ldr	r1, [r7, #12]
 80042e0:	69b8      	ldr	r0, [r7, #24]
 80042e2:	f000 fc1f 	bl	8004b24 <pxPortInitialiseStack>
 80042e6:	4602      	mov	r2, r0
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d002      	beq.n	80042f8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042f8:	bf00      	nop
 80042fa:	3720      	adds	r7, #32
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	200012e4 	.word	0x200012e4
 8004304:	2000134c 	.word	0x2000134c
 8004308:	200013b4 	.word	0x200013b4

0800430c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004314:	f000 fcfa 	bl	8004d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004318:	4b2a      	ldr	r3, [pc, #168]	; (80043c4 <prvAddNewTaskToReadyList+0xb8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3301      	adds	r3, #1
 800431e:	4a29      	ldr	r2, [pc, #164]	; (80043c4 <prvAddNewTaskToReadyList+0xb8>)
 8004320:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004322:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800432a:	4a27      	ldr	r2, [pc, #156]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004330:	4b24      	ldr	r3, [pc, #144]	; (80043c4 <prvAddNewTaskToReadyList+0xb8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d110      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004338:	f000 facc 	bl	80048d4 <prvInitialiseTaskLists>
 800433c:	e00d      	b.n	800435a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800433e:	4b23      	ldr	r3, [pc, #140]	; (80043cc <prvAddNewTaskToReadyList+0xc0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d109      	bne.n	800435a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004346:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	429a      	cmp	r2, r3
 8004352:	d802      	bhi.n	800435a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004354:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800435a:	4b1d      	ldr	r3, [pc, #116]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3301      	adds	r3, #1
 8004360:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <prvAddNewTaskToReadyList+0xc4>)
 8004362:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	2201      	movs	r2, #1
 800436a:	409a      	lsls	r2, r3
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4313      	orrs	r3, r2
 8004372:	4a18      	ldr	r2, [pc, #96]	; (80043d4 <prvAddNewTaskToReadyList+0xc8>)
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800437a:	4613      	mov	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <prvAddNewTaskToReadyList+0xcc>)
 8004384:	441a      	add	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f7ff fdf8 	bl	8003f82 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004392:	f000 fceb 	bl	8004d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <prvAddNewTaskToReadyList+0xc0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00e      	beq.n	80043bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <prvAddNewTaskToReadyList+0xbc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d207      	bcs.n	80043bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <prvAddNewTaskToReadyList+0xd0>)
 80043ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000690 	.word	0x20000690
 80043c8:	20000590 	.word	0x20000590
 80043cc:	2000069c 	.word	0x2000069c
 80043d0:	200006ac 	.word	0x200006ac
 80043d4:	20000698 	.word	0x20000698
 80043d8:	20000594 	.word	0x20000594
 80043dc:	e000ed04 	.word	0xe000ed04

080043e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d017      	beq.n	8004422 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043f2:	4b13      	ldr	r3, [pc, #76]	; (8004440 <vTaskDelay+0x60>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <vTaskDelay+0x30>
	__asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	60bb      	str	r3, [r7, #8]
}
 800440c:	bf00      	nop
 800440e:	e7fe      	b.n	800440e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004410:	f000 f884 	bl	800451c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004414:	2100      	movs	r1, #0
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fb1e 	bl	8004a58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800441c:	f000 f88c 	bl	8004538 <xTaskResumeAll>
 8004420:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d107      	bne.n	8004438 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004428:	4b06      	ldr	r3, [pc, #24]	; (8004444 <vTaskDelay+0x64>)
 800442a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	200006b8 	.word	0x200006b8
 8004444:	e000ed04 	.word	0xe000ed04

08004448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004456:	463a      	mov	r2, r7
 8004458:	1d39      	adds	r1, r7, #4
 800445a:	f107 0308 	add.w	r3, r7, #8
 800445e:	4618      	mov	r0, r3
 8004460:	f7fb fe7e 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004464:	6839      	ldr	r1, [r7, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	9202      	str	r2, [sp, #8]
 800446c:	9301      	str	r3, [sp, #4]
 800446e:	2300      	movs	r3, #0
 8004470:	9300      	str	r3, [sp, #0]
 8004472:	2300      	movs	r3, #0
 8004474:	460a      	mov	r2, r1
 8004476:	4921      	ldr	r1, [pc, #132]	; (80044fc <vTaskStartScheduler+0xb4>)
 8004478:	4821      	ldr	r0, [pc, #132]	; (8004500 <vTaskStartScheduler+0xb8>)
 800447a:	f7ff fe06 	bl	800408a <xTaskCreateStatic>
 800447e:	4603      	mov	r3, r0
 8004480:	4a20      	ldr	r2, [pc, #128]	; (8004504 <vTaskStartScheduler+0xbc>)
 8004482:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004484:	4b1f      	ldr	r3, [pc, #124]	; (8004504 <vTaskStartScheduler+0xbc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800448c:	2301      	movs	r3, #1
 800448e:	617b      	str	r3, [r7, #20]
 8004490:	e001      	b.n	8004496 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d11b      	bne.n	80044d4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800449c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a0:	f383 8811 	msr	BASEPRI, r3
 80044a4:	f3bf 8f6f 	isb	sy
 80044a8:	f3bf 8f4f 	dsb	sy
 80044ac:	613b      	str	r3, [r7, #16]
}
 80044ae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044b0:	4b15      	ldr	r3, [pc, #84]	; (8004508 <vTaskStartScheduler+0xc0>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	334c      	adds	r3, #76	; 0x4c
 80044b6:	4a15      	ldr	r2, [pc, #84]	; (800450c <vTaskStartScheduler+0xc4>)
 80044b8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044ba:	4b15      	ldr	r3, [pc, #84]	; (8004510 <vTaskStartScheduler+0xc8>)
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044c2:	4b14      	ldr	r3, [pc, #80]	; (8004514 <vTaskStartScheduler+0xcc>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <vTaskStartScheduler+0xd0>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ce:	f000 fbab 	bl	8004c28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044d2:	e00e      	b.n	80044f2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d10a      	bne.n	80044f2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	60fb      	str	r3, [r7, #12]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <vTaskStartScheduler+0xa8>
}
 80044f2:	bf00      	nop
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	08005db4 	.word	0x08005db4
 8004500:	080048a5 	.word	0x080048a5
 8004504:	200006b4 	.word	0x200006b4
 8004508:	20000590 	.word	0x20000590
 800450c:	2000005c 	.word	0x2000005c
 8004510:	200006b0 	.word	0x200006b0
 8004514:	2000069c 	.word	0x2000069c
 8004518:	20000694 	.word	0x20000694

0800451c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004520:	4b04      	ldr	r3, [pc, #16]	; (8004534 <vTaskSuspendAll+0x18>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3301      	adds	r3, #1
 8004526:	4a03      	ldr	r2, [pc, #12]	; (8004534 <vTaskSuspendAll+0x18>)
 8004528:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800452a:	bf00      	nop
 800452c:	46bd      	mov	sp, r7
 800452e:	bc80      	pop	{r7}
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	200006b8 	.word	0x200006b8

08004538 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004542:	2300      	movs	r3, #0
 8004544:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004546:	4b41      	ldr	r3, [pc, #260]	; (800464c <xTaskResumeAll+0x114>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10a      	bne.n	8004564 <xTaskResumeAll+0x2c>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	603b      	str	r3, [r7, #0]
}
 8004560:	bf00      	nop
 8004562:	e7fe      	b.n	8004562 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004564:	f000 fbd2 	bl	8004d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004568:	4b38      	ldr	r3, [pc, #224]	; (800464c <xTaskResumeAll+0x114>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3b01      	subs	r3, #1
 800456e:	4a37      	ldr	r2, [pc, #220]	; (800464c <xTaskResumeAll+0x114>)
 8004570:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004572:	4b36      	ldr	r3, [pc, #216]	; (800464c <xTaskResumeAll+0x114>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d161      	bne.n	800463e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800457a:	4b35      	ldr	r3, [pc, #212]	; (8004650 <xTaskResumeAll+0x118>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d05d      	beq.n	800463e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004582:	e02e      	b.n	80045e2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004584:	4b33      	ldr	r3, [pc, #204]	; (8004654 <xTaskResumeAll+0x11c>)
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3318      	adds	r3, #24
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff fd51 	bl	8004038 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	3304      	adds	r3, #4
 800459a:	4618      	mov	r0, r3
 800459c:	f7ff fd4c 	bl	8004038 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	2201      	movs	r2, #1
 80045a6:	409a      	lsls	r2, r3
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <xTaskResumeAll+0x120>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <xTaskResumeAll+0x120>)
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4a27      	ldr	r2, [pc, #156]	; (800465c <xTaskResumeAll+0x124>)
 80045c0:	441a      	add	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f7ff fcda 	bl	8003f82 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d2:	4b23      	ldr	r3, [pc, #140]	; (8004660 <xTaskResumeAll+0x128>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d8:	429a      	cmp	r2, r3
 80045da:	d302      	bcc.n	80045e2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80045dc:	4b21      	ldr	r3, [pc, #132]	; (8004664 <xTaskResumeAll+0x12c>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045e2:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <xTaskResumeAll+0x11c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1cc      	bne.n	8004584 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045f0:	f000 fa12 	bl	8004a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045f4:	4b1c      	ldr	r3, [pc, #112]	; (8004668 <xTaskResumeAll+0x130>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d010      	beq.n	8004622 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004600:	f000 f836 	bl	8004670 <xTaskIncrementTick>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800460a:	4b16      	ldr	r3, [pc, #88]	; (8004664 <xTaskResumeAll+0x12c>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f1      	bne.n	8004600 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800461c:	4b12      	ldr	r3, [pc, #72]	; (8004668 <xTaskResumeAll+0x130>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <xTaskResumeAll+0x12c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800462a:	2301      	movs	r3, #1
 800462c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800462e:	4b0f      	ldr	r3, [pc, #60]	; (800466c <xTaskResumeAll+0x134>)
 8004630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800463e:	f000 fb95 	bl	8004d6c <vPortExitCritical>

	return xAlreadyYielded;
 8004642:	68bb      	ldr	r3, [r7, #8]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	200006b8 	.word	0x200006b8
 8004650:	20000690 	.word	0x20000690
 8004654:	20000650 	.word	0x20000650
 8004658:	20000698 	.word	0x20000698
 800465c:	20000594 	.word	0x20000594
 8004660:	20000590 	.word	0x20000590
 8004664:	200006a4 	.word	0x200006a4
 8004668:	200006a0 	.word	0x200006a0
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800467a:	4b4e      	ldr	r3, [pc, #312]	; (80047b4 <xTaskIncrementTick+0x144>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 808e 	bne.w	80047a0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004684:	4b4c      	ldr	r3, [pc, #304]	; (80047b8 <xTaskIncrementTick+0x148>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3301      	adds	r3, #1
 800468a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800468c:	4a4a      	ldr	r2, [pc, #296]	; (80047b8 <xTaskIncrementTick+0x148>)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d120      	bne.n	80046da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004698:	4b48      	ldr	r3, [pc, #288]	; (80047bc <xTaskIncrementTick+0x14c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	603b      	str	r3, [r7, #0]
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xTaskIncrementTick+0x46>
 80046b8:	4b40      	ldr	r3, [pc, #256]	; (80047bc <xTaskIncrementTick+0x14c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b40      	ldr	r3, [pc, #256]	; (80047c0 <xTaskIncrementTick+0x150>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a3e      	ldr	r2, [pc, #248]	; (80047bc <xTaskIncrementTick+0x14c>)
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4a3e      	ldr	r2, [pc, #248]	; (80047c0 <xTaskIncrementTick+0x150>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b3d      	ldr	r3, [pc, #244]	; (80047c4 <xTaskIncrementTick+0x154>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	4a3c      	ldr	r2, [pc, #240]	; (80047c4 <xTaskIncrementTick+0x154>)
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	f000 f99f 	bl	8004a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046da:	4b3b      	ldr	r3, [pc, #236]	; (80047c8 <xTaskIncrementTick+0x158>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d348      	bcc.n	8004776 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046e4:	4b35      	ldr	r3, [pc, #212]	; (80047bc <xTaskIncrementTick+0x14c>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d104      	bne.n	80046f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046ee:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <xTaskIncrementTick+0x158>)
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	601a      	str	r2, [r3, #0]
					break;
 80046f6:	e03e      	b.n	8004776 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046f8:	4b30      	ldr	r3, [pc, #192]	; (80047bc <xTaskIncrementTick+0x14c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	429a      	cmp	r2, r3
 800470e:	d203      	bcs.n	8004718 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004710:	4a2d      	ldr	r2, [pc, #180]	; (80047c8 <xTaskIncrementTick+0x158>)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004716:	e02e      	b.n	8004776 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	3304      	adds	r3, #4
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fc8b 	bl	8004038 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	3318      	adds	r3, #24
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fc82 	bl	8004038 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	2201      	movs	r2, #1
 800473a:	409a      	lsls	r2, r3
 800473c:	4b23      	ldr	r3, [pc, #140]	; (80047cc <xTaskIncrementTick+0x15c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4313      	orrs	r3, r2
 8004742:	4a22      	ldr	r2, [pc, #136]	; (80047cc <xTaskIncrementTick+0x15c>)
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <xTaskIncrementTick+0x160>)
 8004754:	441a      	add	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	3304      	adds	r3, #4
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7ff fc10 	bl	8003f82 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <xTaskIncrementTick+0x164>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476c:	429a      	cmp	r2, r3
 800476e:	d3b9      	bcc.n	80046e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004770:	2301      	movs	r3, #1
 8004772:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004774:	e7b6      	b.n	80046e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004776:	4b17      	ldr	r3, [pc, #92]	; (80047d4 <xTaskIncrementTick+0x164>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800477c:	4914      	ldr	r1, [pc, #80]	; (80047d0 <xTaskIncrementTick+0x160>)
 800477e:	4613      	mov	r3, r2
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d901      	bls.n	8004792 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800478e:	2301      	movs	r3, #1
 8004790:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004792:	4b11      	ldr	r3, [pc, #68]	; (80047d8 <xTaskIncrementTick+0x168>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	e004      	b.n	80047aa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <xTaskIncrementTick+0x16c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3301      	adds	r3, #1
 80047a6:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <xTaskIncrementTick+0x16c>)
 80047a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047aa:	697b      	ldr	r3, [r7, #20]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	200006b8 	.word	0x200006b8
 80047b8:	20000694 	.word	0x20000694
 80047bc:	20000648 	.word	0x20000648
 80047c0:	2000064c 	.word	0x2000064c
 80047c4:	200006a8 	.word	0x200006a8
 80047c8:	200006b0 	.word	0x200006b0
 80047cc:	20000698 	.word	0x20000698
 80047d0:	20000594 	.word	0x20000594
 80047d4:	20000590 	.word	0x20000590
 80047d8:	200006a4 	.word	0x200006a4
 80047dc:	200006a0 	.word	0x200006a0

080047e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047e6:	4b29      	ldr	r3, [pc, #164]	; (800488c <vTaskSwitchContext+0xac>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047ee:	4b28      	ldr	r3, [pc, #160]	; (8004890 <vTaskSwitchContext+0xb0>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047f4:	e044      	b.n	8004880 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80047f6:	4b26      	ldr	r3, [pc, #152]	; (8004890 <vTaskSwitchContext+0xb0>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <vTaskSwitchContext+0xb4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	f1c3 031f 	rsb	r3, r3, #31
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	4921      	ldr	r1, [pc, #132]	; (8004898 <vTaskSwitchContext+0xb8>)
 8004814:	697a      	ldr	r2, [r7, #20]
 8004816:	4613      	mov	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	607b      	str	r3, [r7, #4]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <vTaskSwitchContext+0x5a>
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4613      	mov	r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4a14      	ldr	r2, [pc, #80]	; (8004898 <vTaskSwitchContext+0xb8>)
 8004848:	4413      	add	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	3308      	adds	r3, #8
 800485e:	429a      	cmp	r2, r3
 8004860:	d104      	bne.n	800486c <vTaskSwitchContext+0x8c>
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	605a      	str	r2, [r3, #4]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4a0a      	ldr	r2, [pc, #40]	; (800489c <vTaskSwitchContext+0xbc>)
 8004874:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004876:	4b09      	ldr	r3, [pc, #36]	; (800489c <vTaskSwitchContext+0xbc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	334c      	adds	r3, #76	; 0x4c
 800487c:	4a08      	ldr	r2, [pc, #32]	; (80048a0 <vTaskSwitchContext+0xc0>)
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	bc80      	pop	{r7}
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	200006b8 	.word	0x200006b8
 8004890:	200006a4 	.word	0x200006a4
 8004894:	20000698 	.word	0x20000698
 8004898:	20000594 	.word	0x20000594
 800489c:	20000590 	.word	0x20000590
 80048a0:	2000005c 	.word	0x2000005c

080048a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048ac:	f000 f852 	bl	8004954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <prvIdleTask+0x28>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d9f9      	bls.n	80048ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80048b8:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <prvIdleTask+0x2c>)
 80048ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048c8:	e7f0      	b.n	80048ac <prvIdleTask+0x8>
 80048ca:	bf00      	nop
 80048cc:	20000594 	.word	0x20000594
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
 80048de:	e00c      	b.n	80048fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4a12      	ldr	r2, [pc, #72]	; (8004934 <prvInitialiseTaskLists+0x60>)
 80048ec:	4413      	add	r3, r2
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fb1c 	bl	8003f2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3301      	adds	r3, #1
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b06      	cmp	r3, #6
 80048fe:	d9ef      	bls.n	80048e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004900:	480d      	ldr	r0, [pc, #52]	; (8004938 <prvInitialiseTaskLists+0x64>)
 8004902:	f7ff fb13 	bl	8003f2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004906:	480d      	ldr	r0, [pc, #52]	; (800493c <prvInitialiseTaskLists+0x68>)
 8004908:	f7ff fb10 	bl	8003f2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800490c:	480c      	ldr	r0, [pc, #48]	; (8004940 <prvInitialiseTaskLists+0x6c>)
 800490e:	f7ff fb0d 	bl	8003f2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004912:	480c      	ldr	r0, [pc, #48]	; (8004944 <prvInitialiseTaskLists+0x70>)
 8004914:	f7ff fb0a 	bl	8003f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004918:	480b      	ldr	r0, [pc, #44]	; (8004948 <prvInitialiseTaskLists+0x74>)
 800491a:	f7ff fb07 	bl	8003f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800491e:	4b0b      	ldr	r3, [pc, #44]	; (800494c <prvInitialiseTaskLists+0x78>)
 8004920:	4a05      	ldr	r2, [pc, #20]	; (8004938 <prvInitialiseTaskLists+0x64>)
 8004922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004924:	4b0a      	ldr	r3, [pc, #40]	; (8004950 <prvInitialiseTaskLists+0x7c>)
 8004926:	4a05      	ldr	r2, [pc, #20]	; (800493c <prvInitialiseTaskLists+0x68>)
 8004928:	601a      	str	r2, [r3, #0]
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000594 	.word	0x20000594
 8004938:	20000620 	.word	0x20000620
 800493c:	20000634 	.word	0x20000634
 8004940:	20000650 	.word	0x20000650
 8004944:	20000664 	.word	0x20000664
 8004948:	2000067c 	.word	0x2000067c
 800494c:	20000648 	.word	0x20000648
 8004950:	2000064c 	.word	0x2000064c

08004954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800495a:	e019      	b.n	8004990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800495c:	f000 f9d6 	bl	8004d0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004960:	4b10      	ldr	r3, [pc, #64]	; (80049a4 <prvCheckTasksWaitingTermination+0x50>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fb63 	bl	8004038 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <prvCheckTasksWaitingTermination+0x54>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	3b01      	subs	r3, #1
 8004978:	4a0b      	ldr	r2, [pc, #44]	; (80049a8 <prvCheckTasksWaitingTermination+0x54>)
 800497a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <prvCheckTasksWaitingTermination+0x58>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3b01      	subs	r3, #1
 8004982:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <prvCheckTasksWaitingTermination+0x58>)
 8004984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004986:	f000 f9f1 	bl	8004d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f810 	bl	80049b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <prvCheckTasksWaitingTermination+0x58>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1e1      	bne.n	800495c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004998:	bf00      	nop
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000664 	.word	0x20000664
 80049a8:	20000690 	.word	0x20000690
 80049ac:	20000678 	.word	0x20000678

080049b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	334c      	adds	r3, #76	; 0x4c
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fcbb 	bl	8005338 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d108      	bne.n	80049de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fb29 	bl	8005028 <vPortFree>
				vPortFree( pxTCB );
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fb26 	bl	8005028 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049dc:	e018      	b.n	8004a10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d103      	bne.n	80049f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fb1d 	bl	8005028 <vPortFree>
	}
 80049ee:	e00f      	b.n	8004a10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d00a      	beq.n	8004a10 <prvDeleteTCB+0x60>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	60fb      	str	r3, [r7, #12]
}
 8004a0c:	bf00      	nop
 8004a0e:	e7fe      	b.n	8004a0e <prvDeleteTCB+0x5e>
	}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <prvResetNextTaskUnblockTime+0x38>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a28:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <prvResetNextTaskUnblockTime+0x3c>)
 8004a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a30:	e008      	b.n	8004a44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <prvResetNextTaskUnblockTime+0x38>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a04      	ldr	r2, [pc, #16]	; (8004a54 <prvResetNextTaskUnblockTime+0x3c>)
 8004a42:	6013      	str	r3, [r2, #0]
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000648 	.word	0x20000648
 8004a54:	200006b0 	.word	0x200006b0

08004a58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a62:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a68:	4b28      	ldr	r3, [pc, #160]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7ff fae2 	bl	8004038 <uxListRemove>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	2201      	movs	r2, #1
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43da      	mvns	r2, r3
 8004a88:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	4a20      	ldr	r2, [pc, #128]	; (8004b10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004a90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a98:	d10a      	bne.n	8004ab0 <prvAddCurrentTaskToDelayedList+0x58>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d007      	beq.n	8004ab0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004aa0:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	481a      	ldr	r0, [pc, #104]	; (8004b14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004aaa:	f7ff fa6a 	bl	8003f82 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aae:	e026      	b.n	8004afe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ab8:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d209      	bcs.n	8004adc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac8:	4b13      	ldr	r3, [pc, #76]	; (8004b18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4619      	mov	r1, r3
 8004ad4:	4610      	mov	r0, r2
 8004ad6:	f7ff fa77 	bl	8003fc8 <vListInsert>
}
 8004ada:	e010      	b.n	8004afe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7ff fa6d 	bl	8003fc8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68ba      	ldr	r2, [r7, #8]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d202      	bcs.n	8004afe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004af8:	4a09      	ldr	r2, [pc, #36]	; (8004b20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6013      	str	r3, [r2, #0]
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000694 	.word	0x20000694
 8004b0c:	20000590 	.word	0x20000590
 8004b10:	20000698 	.word	0x20000698
 8004b14:	2000067c 	.word	0x2000067c
 8004b18:	2000064c 	.word	0x2000064c
 8004b1c:	20000648 	.word	0x20000648
 8004b20:	200006b0 	.word	0x200006b0

08004b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3b04      	subs	r3, #4
 8004b34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f023 0201 	bic.w	r2, r3, #1
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3b04      	subs	r3, #4
 8004b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b54:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <pxPortInitialiseStack+0x54>)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	3b14      	subs	r3, #20
 8004b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	3b20      	subs	r3, #32
 8004b6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3714      	adds	r7, #20
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bc80      	pop	{r7}
 8004b76:	4770      	bx	lr
 8004b78:	08004b7d 	.word	0x08004b7d

08004b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b86:	4b12      	ldr	r3, [pc, #72]	; (8004bd0 <prvTaskExitError+0x54>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d00a      	beq.n	8004ba6 <prvTaskExitError+0x2a>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	60fb      	str	r3, [r7, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	e7fe      	b.n	8004ba4 <prvTaskExitError+0x28>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	60bb      	str	r3, [r7, #8]
}
 8004bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bba:	bf00      	nop
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d0fc      	beq.n	8004bbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bc2:	bf00      	nop
 8004bc4:	bf00      	nop
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	2000000c 	.word	0x2000000c
	...

08004be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004be0:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <pxCurrentTCBConst2>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6808      	ldr	r0, [r1, #0]
 8004be6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bea:	f380 8809 	msr	PSP, r0
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f04f 0000 	mov.w	r0, #0
 8004bf6:	f380 8811 	msr	BASEPRI, r0
 8004bfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8004bfe:	4770      	bx	lr

08004c00 <pxCurrentTCBConst2>:
 8004c00:	20000590 	.word	0x20000590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004c08:	4806      	ldr	r0, [pc, #24]	; (8004c24 <prvPortStartFirstTask+0x1c>)
 8004c0a:	6800      	ldr	r0, [r0, #0]
 8004c0c:	6800      	ldr	r0, [r0, #0]
 8004c0e:	f380 8808 	msr	MSP, r0
 8004c12:	b662      	cpsie	i
 8004c14:	b661      	cpsie	f
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	df00      	svc	0
 8004c20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c22:	bf00      	nop
 8004c24:	e000ed08 	.word	0xe000ed08

08004c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c2e:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <xPortStartScheduler+0xd0>)
 8004c30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	22ff      	movs	r2, #255	; 0xff
 8004c3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c50:	b2da      	uxtb	r2, r3
 8004c52:	4b2a      	ldr	r3, [pc, #168]	; (8004cfc <xPortStartScheduler+0xd4>)
 8004c54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c56:	4b2a      	ldr	r3, [pc, #168]	; (8004d00 <xPortStartScheduler+0xd8>)
 8004c58:	2207      	movs	r2, #7
 8004c5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c5c:	e009      	b.n	8004c72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c5e:	4b28      	ldr	r3, [pc, #160]	; (8004d00 <xPortStartScheduler+0xd8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <xPortStartScheduler+0xd8>)
 8004c66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b80      	cmp	r3, #128	; 0x80
 8004c7c:	d0ef      	beq.n	8004c5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c7e:	4b20      	ldr	r3, [pc, #128]	; (8004d00 <xPortStartScheduler+0xd8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1c3 0307 	rsb	r3, r3, #7
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d00a      	beq.n	8004ca0 <xPortStartScheduler+0x78>
	__asm volatile
 8004c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8e:	f383 8811 	msr	BASEPRI, r3
 8004c92:	f3bf 8f6f 	isb	sy
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	60bb      	str	r3, [r7, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	e7fe      	b.n	8004c9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ca0:	4b17      	ldr	r3, [pc, #92]	; (8004d00 <xPortStartScheduler+0xd8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	4a16      	ldr	r2, [pc, #88]	; (8004d00 <xPortStartScheduler+0xd8>)
 8004ca8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004caa:	4b15      	ldr	r3, [pc, #84]	; (8004d00 <xPortStartScheduler+0xd8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cb2:	4a13      	ldr	r2, [pc, #76]	; (8004d00 <xPortStartScheduler+0xd8>)
 8004cb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cbe:	4b11      	ldr	r3, [pc, #68]	; (8004d04 <xPortStartScheduler+0xdc>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a10      	ldr	r2, [pc, #64]	; (8004d04 <xPortStartScheduler+0xdc>)
 8004cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <xPortStartScheduler+0xdc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <xPortStartScheduler+0xdc>)
 8004cd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004cd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cd6:	f000 f8b9 	bl	8004e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cda:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <xPortStartScheduler+0xe0>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ce0:	f7ff ff92 	bl	8004c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004ce4:	f7ff fd7c 	bl	80047e0 <vTaskSwitchContext>
	prvTaskExitError();
 8004ce8:	f7ff ff48 	bl	8004b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	e000e400 	.word	0xe000e400
 8004cfc:	200006bc 	.word	0x200006bc
 8004d00:	200006c0 	.word	0x200006c0
 8004d04:	e000ed20 	.word	0xe000ed20
 8004d08:	2000000c 	.word	0x2000000c

08004d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
	__asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	607b      	str	r3, [r7, #4]
}
 8004d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d26:	4b0f      	ldr	r3, [pc, #60]	; (8004d64 <vPortEnterCritical+0x58>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	4a0d      	ldr	r2, [pc, #52]	; (8004d64 <vPortEnterCritical+0x58>)
 8004d2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d30:	4b0c      	ldr	r3, [pc, #48]	; (8004d64 <vPortEnterCritical+0x58>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d10f      	bne.n	8004d58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d38:	4b0b      	ldr	r3, [pc, #44]	; (8004d68 <vPortEnterCritical+0x5c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	603b      	str	r3, [r7, #0]
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <vPortEnterCritical+0x4a>
	}
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	2000000c 	.word	0x2000000c
 8004d68:	e000ed04 	.word	0xe000ed04

08004d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d72:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <vPortExitCritical+0x4c>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10a      	bne.n	8004d90 <vPortExitCritical+0x24>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	607b      	str	r3, [r7, #4]
}
 8004d8c:	bf00      	nop
 8004d8e:	e7fe      	b.n	8004d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d90:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <vPortExitCritical+0x4c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	3b01      	subs	r3, #1
 8004d96:	4a08      	ldr	r2, [pc, #32]	; (8004db8 <vPortExitCritical+0x4c>)
 8004d98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <vPortExitCritical+0x4c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <vPortExitCritical+0x42>
 8004da2:	2300      	movs	r3, #0
 8004da4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bc80      	pop	{r7}
 8004db6:	4770      	bx	lr
 8004db8:	2000000c 	.word	0x2000000c
 8004dbc:	00000000 	.word	0x00000000

08004dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004dc0:	f3ef 8009 	mrs	r0, PSP
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <pxCurrentTCBConst>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dd0:	6010      	str	r0, [r2, #0]
 8004dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004dd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004dda:	f380 8811 	msr	BASEPRI, r0
 8004dde:	f7ff fcff 	bl	80047e0 <vTaskSwitchContext>
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	6808      	ldr	r0, [r1, #0]
 8004df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004df6:	f380 8809 	msr	PSP, r0
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	4770      	bx	lr

08004e00 <pxCurrentTCBConst>:
 8004e00:	20000590 	.word	0x20000590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop

08004e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	607b      	str	r3, [r7, #4]
}
 8004e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e22:	f7ff fc25 	bl	8004670 <xTaskIncrementTick>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <SysTick_Handler+0x40>)
 8004e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	2300      	movs	r3, #0
 8004e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
}
 8004e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e40:	bf00      	nop
 8004e42:	3708      	adds	r7, #8
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e50:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <vPortSetupTimerInterrupt+0x30>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <vPortSetupTimerInterrupt+0x34>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e5c:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <vPortSetupTimerInterrupt+0x38>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a09      	ldr	r2, [pc, #36]	; (8004e88 <vPortSetupTimerInterrupt+0x3c>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	099b      	lsrs	r3, r3, #6
 8004e68:	4a08      	ldr	r2, [pc, #32]	; (8004e8c <vPortSetupTimerInterrupt+0x40>)
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e6e:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <vPortSetupTimerInterrupt+0x30>)
 8004e70:	2207      	movs	r2, #7
 8004e72:	601a      	str	r2, [r3, #0]
}
 8004e74:	bf00      	nop
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	e000e010 	.word	0xe000e010
 8004e80:	e000e018 	.word	0xe000e018
 8004e84:	20000000 	.word	0x20000000
 8004e88:	10624dd3 	.word	0x10624dd3
 8004e8c:	e000e014 	.word	0xe000e014

08004e90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	; 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e9c:	f7ff fb3e 	bl	800451c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ea0:	4b5b      	ldr	r3, [pc, #364]	; (8005010 <pvPortMalloc+0x180>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ea8:	f000 f920 	bl	80050ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004eac:	4b59      	ldr	r3, [pc, #356]	; (8005014 <pvPortMalloc+0x184>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 8093 	bne.w	8004fe0 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d01d      	beq.n	8004efc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004ec0:	2208      	movs	r2, #8
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4413      	add	r3, r2
 8004ec6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d014      	beq.n	8004efc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f023 0307 	bic.w	r3, r3, #7
 8004ed8:	3308      	adds	r3, #8
 8004eda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <pvPortMalloc+0x6c>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	617b      	str	r3, [r7, #20]
}
 8004ef8:	bf00      	nop
 8004efa:	e7fe      	b.n	8004efa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d06e      	beq.n	8004fe0 <pvPortMalloc+0x150>
 8004f02:	4b45      	ldr	r3, [pc, #276]	; (8005018 <pvPortMalloc+0x188>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d869      	bhi.n	8004fe0 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f0c:	4b43      	ldr	r3, [pc, #268]	; (800501c <pvPortMalloc+0x18c>)
 8004f0e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f10:	4b42      	ldr	r3, [pc, #264]	; (800501c <pvPortMalloc+0x18c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f16:	e004      	b.n	8004f22 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d903      	bls.n	8004f34 <pvPortMalloc+0xa4>
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f1      	bne.n	8004f18 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f34:	4b36      	ldr	r3, [pc, #216]	; (8005010 <pvPortMalloc+0x180>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d050      	beq.n	8004fe0 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2208      	movs	r2, #8
 8004f44:	4413      	add	r3, r2
 8004f46:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	1ad2      	subs	r2, r2, r3
 8004f58:	2308      	movs	r3, #8
 8004f5a:	005b      	lsls	r3, r3, #1
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d91f      	bls.n	8004fa0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4413      	add	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f003 0307 	and.w	r3, r3, #7
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <pvPortMalloc+0xf8>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	613b      	str	r3, [r7, #16]
}
 8004f84:	bf00      	nop
 8004f86:	e7fe      	b.n	8004f86 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	1ad2      	subs	r2, r2, r3
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f9a:	69b8      	ldr	r0, [r7, #24]
 8004f9c:	f000 f908 	bl	80051b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <pvPortMalloc+0x188>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	4a1b      	ldr	r2, [pc, #108]	; (8005018 <pvPortMalloc+0x188>)
 8004fac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004fae:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <pvPortMalloc+0x188>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b1b      	ldr	r3, [pc, #108]	; (8005020 <pvPortMalloc+0x190>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d203      	bcs.n	8004fc2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004fba:	4b17      	ldr	r3, [pc, #92]	; (8005018 <pvPortMalloc+0x188>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a18      	ldr	r2, [pc, #96]	; (8005020 <pvPortMalloc+0x190>)
 8004fc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	4b13      	ldr	r3, [pc, #76]	; (8005014 <pvPortMalloc+0x184>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <pvPortMalloc+0x194>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	4a11      	ldr	r2, [pc, #68]	; (8005024 <pvPortMalloc+0x194>)
 8004fde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004fe0:	f7ff faaa 	bl	8004538 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <pvPortMalloc+0x174>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	60fb      	str	r3, [r7, #12]
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <pvPortMalloc+0x172>
	return pvReturn;
 8005004:	69fb      	ldr	r3, [r7, #28]
}
 8005006:	4618      	mov	r0, r3
 8005008:	3728      	adds	r7, #40	; 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	200012cc 	.word	0x200012cc
 8005014:	200012e0 	.word	0x200012e0
 8005018:	200012d0 	.word	0x200012d0
 800501c:	200012c4 	.word	0x200012c4
 8005020:	200012d4 	.word	0x200012d4
 8005024:	200012d8 	.word	0x200012d8

08005028 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d04d      	beq.n	80050d6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800503a:	2308      	movs	r3, #8
 800503c:	425b      	negs	r3, r3
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4413      	add	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	4b24      	ldr	r3, [pc, #144]	; (80050e0 <vPortFree+0xb8>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4013      	ands	r3, r2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <vPortFree+0x44>
	__asm volatile
 8005056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505a:	f383 8811 	msr	BASEPRI, r3
 800505e:	f3bf 8f6f 	isb	sy
 8005062:	f3bf 8f4f 	dsb	sy
 8005066:	60fb      	str	r3, [r7, #12]
}
 8005068:	bf00      	nop
 800506a:	e7fe      	b.n	800506a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <vPortFree+0x62>
	__asm volatile
 8005074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005078:	f383 8811 	msr	BASEPRI, r3
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	60bb      	str	r3, [r7, #8]
}
 8005086:	bf00      	nop
 8005088:	e7fe      	b.n	8005088 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <vPortFree+0xb8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01e      	beq.n	80050d6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d11a      	bne.n	80050d6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <vPortFree+0xb8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	401a      	ands	r2, r3
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80050b0:	f7ff fa34 	bl	800451c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	4b0a      	ldr	r3, [pc, #40]	; (80050e4 <vPortFree+0xbc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4413      	add	r3, r2
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <vPortFree+0xbc>)
 80050c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050c2:	6938      	ldr	r0, [r7, #16]
 80050c4:	f000 f874 	bl	80051b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80050c8:	4b07      	ldr	r3, [pc, #28]	; (80050e8 <vPortFree+0xc0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	4a06      	ldr	r2, [pc, #24]	; (80050e8 <vPortFree+0xc0>)
 80050d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80050d2:	f7ff fa31 	bl	8004538 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	200012e0 	.word	0x200012e0
 80050e4:	200012d0 	.word	0x200012d0
 80050e8:	200012dc 	.word	0x200012dc

080050ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050f8:	4b27      	ldr	r3, [pc, #156]	; (8005198 <prvHeapInit+0xac>)
 80050fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00c      	beq.n	8005120 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3307      	adds	r3, #7
 800510a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0307 	bic.w	r3, r3, #7
 8005112:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	4a1f      	ldr	r2, [pc, #124]	; (8005198 <prvHeapInit+0xac>)
 800511c:	4413      	add	r3, r2
 800511e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005124:	4a1d      	ldr	r2, [pc, #116]	; (800519c <prvHeapInit+0xb0>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800512a:	4b1c      	ldr	r3, [pc, #112]	; (800519c <prvHeapInit+0xb0>)
 800512c:	2200      	movs	r2, #0
 800512e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	4413      	add	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005138:	2208      	movs	r2, #8
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1a9b      	subs	r3, r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0307 	bic.w	r3, r3, #7
 8005146:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <prvHeapInit+0xb4>)
 800514c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800514e:	4b14      	ldr	r3, [pc, #80]	; (80051a0 <prvHeapInit+0xb4>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2200      	movs	r2, #0
 8005154:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005156:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <prvHeapInit+0xb4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	1ad2      	subs	r2, r2, r3
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <prvHeapInit+0xb4>)
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <prvHeapInit+0xb8>)
 800517a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	4a09      	ldr	r2, [pc, #36]	; (80051a8 <prvHeapInit+0xbc>)
 8005182:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005184:	4b09      	ldr	r3, [pc, #36]	; (80051ac <prvHeapInit+0xc0>)
 8005186:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800518a:	601a      	str	r2, [r3, #0]
}
 800518c:	bf00      	nop
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	bc80      	pop	{r7}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	200006c4 	.word	0x200006c4
 800519c:	200012c4 	.word	0x200012c4
 80051a0:	200012cc 	.word	0x200012cc
 80051a4:	200012d4 	.word	0x200012d4
 80051a8:	200012d0 	.word	0x200012d0
 80051ac:	200012e0 	.word	0x200012e0

080051b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80051b8:	4b27      	ldr	r3, [pc, #156]	; (8005258 <prvInsertBlockIntoFreeList+0xa8>)
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	e002      	b.n	80051c4 <prvInsertBlockIntoFreeList+0x14>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d8f7      	bhi.n	80051be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	4413      	add	r3, r2
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d108      	bne.n	80051f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	441a      	add	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	441a      	add	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d118      	bne.n	8005238 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <prvInsertBlockIntoFreeList+0xac>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	429a      	cmp	r2, r3
 8005210:	d00d      	beq.n	800522e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685a      	ldr	r2, [r3, #4]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	e008      	b.n	8005240 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800522e:	4b0b      	ldr	r3, [pc, #44]	; (800525c <prvInsertBlockIntoFreeList+0xac>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	601a      	str	r2, [r3, #0]
 8005236:	e003      	b.n	8005240 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	429a      	cmp	r2, r3
 8005246:	d002      	beq.n	800524e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800524e:	bf00      	nop
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr
 8005258:	200012c4 	.word	0x200012c4
 800525c:	200012cc 	.word	0x200012cc

08005260 <sniprintf>:
 8005260:	b40c      	push	{r2, r3}
 8005262:	b530      	push	{r4, r5, lr}
 8005264:	4b17      	ldr	r3, [pc, #92]	; (80052c4 <sniprintf+0x64>)
 8005266:	1e0c      	subs	r4, r1, #0
 8005268:	681d      	ldr	r5, [r3, #0]
 800526a:	b09d      	sub	sp, #116	; 0x74
 800526c:	da08      	bge.n	8005280 <sniprintf+0x20>
 800526e:	238b      	movs	r3, #139	; 0x8b
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	b01d      	add	sp, #116	; 0x74
 8005278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800527c:	b002      	add	sp, #8
 800527e:	4770      	bx	lr
 8005280:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005284:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005288:	bf0c      	ite	eq
 800528a:	4623      	moveq	r3, r4
 800528c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005290:	9304      	str	r3, [sp, #16]
 8005292:	9307      	str	r3, [sp, #28]
 8005294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005298:	9002      	str	r0, [sp, #8]
 800529a:	9006      	str	r0, [sp, #24]
 800529c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052a0:	4628      	mov	r0, r5
 80052a2:	ab21      	add	r3, sp, #132	; 0x84
 80052a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80052a6:	a902      	add	r1, sp, #8
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	f000 fa23 	bl	80056f4 <_svfiprintf_r>
 80052ae:	1c43      	adds	r3, r0, #1
 80052b0:	bfbc      	itt	lt
 80052b2:	238b      	movlt	r3, #139	; 0x8b
 80052b4:	602b      	strlt	r3, [r5, #0]
 80052b6:	2c00      	cmp	r4, #0
 80052b8:	d0dd      	beq.n	8005276 <sniprintf+0x16>
 80052ba:	2200      	movs	r2, #0
 80052bc:	9b02      	ldr	r3, [sp, #8]
 80052be:	701a      	strb	r2, [r3, #0]
 80052c0:	e7d9      	b.n	8005276 <sniprintf+0x16>
 80052c2:	bf00      	nop
 80052c4:	2000005c 	.word	0x2000005c

080052c8 <siprintf>:
 80052c8:	b40e      	push	{r1, r2, r3}
 80052ca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052ce:	b500      	push	{lr}
 80052d0:	b09c      	sub	sp, #112	; 0x70
 80052d2:	ab1d      	add	r3, sp, #116	; 0x74
 80052d4:	9002      	str	r0, [sp, #8]
 80052d6:	9006      	str	r0, [sp, #24]
 80052d8:	9107      	str	r1, [sp, #28]
 80052da:	9104      	str	r1, [sp, #16]
 80052dc:	4808      	ldr	r0, [pc, #32]	; (8005300 <siprintf+0x38>)
 80052de:	4909      	ldr	r1, [pc, #36]	; (8005304 <siprintf+0x3c>)
 80052e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80052e4:	9105      	str	r1, [sp, #20]
 80052e6:	6800      	ldr	r0, [r0, #0]
 80052e8:	a902      	add	r1, sp, #8
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	f000 fa02 	bl	80056f4 <_svfiprintf_r>
 80052f0:	2200      	movs	r2, #0
 80052f2:	9b02      	ldr	r3, [sp, #8]
 80052f4:	701a      	strb	r2, [r3, #0]
 80052f6:	b01c      	add	sp, #112	; 0x70
 80052f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052fc:	b003      	add	sp, #12
 80052fe:	4770      	bx	lr
 8005300:	2000005c 	.word	0x2000005c
 8005304:	ffff0208 	.word	0xffff0208

08005308 <memset>:
 8005308:	4603      	mov	r3, r0
 800530a:	4402      	add	r2, r0
 800530c:	4293      	cmp	r3, r2
 800530e:	d100      	bne.n	8005312 <memset+0xa>
 8005310:	4770      	bx	lr
 8005312:	f803 1b01 	strb.w	r1, [r3], #1
 8005316:	e7f9      	b.n	800530c <memset+0x4>

08005318 <strcat>:
 8005318:	4602      	mov	r2, r0
 800531a:	b510      	push	{r4, lr}
 800531c:	7814      	ldrb	r4, [r2, #0]
 800531e:	4613      	mov	r3, r2
 8005320:	3201      	adds	r2, #1
 8005322:	2c00      	cmp	r4, #0
 8005324:	d1fa      	bne.n	800531c <strcat+0x4>
 8005326:	3b01      	subs	r3, #1
 8005328:	f811 2b01 	ldrb.w	r2, [r1], #1
 800532c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005330:	2a00      	cmp	r2, #0
 8005332:	d1f9      	bne.n	8005328 <strcat+0x10>
 8005334:	bd10      	pop	{r4, pc}
	...

08005338 <_reclaim_reent>:
 8005338:	4b29      	ldr	r3, [pc, #164]	; (80053e0 <_reclaim_reent+0xa8>)
 800533a:	b570      	push	{r4, r5, r6, lr}
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4604      	mov	r4, r0
 8005340:	4283      	cmp	r3, r0
 8005342:	d04b      	beq.n	80053dc <_reclaim_reent+0xa4>
 8005344:	69c3      	ldr	r3, [r0, #28]
 8005346:	b143      	cbz	r3, 800535a <_reclaim_reent+0x22>
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d144      	bne.n	80053d8 <_reclaim_reent+0xa0>
 800534e:	69e3      	ldr	r3, [r4, #28]
 8005350:	6819      	ldr	r1, [r3, #0]
 8005352:	b111      	cbz	r1, 800535a <_reclaim_reent+0x22>
 8005354:	4620      	mov	r0, r4
 8005356:	f000 f87f 	bl	8005458 <_free_r>
 800535a:	6961      	ldr	r1, [r4, #20]
 800535c:	b111      	cbz	r1, 8005364 <_reclaim_reent+0x2c>
 800535e:	4620      	mov	r0, r4
 8005360:	f000 f87a 	bl	8005458 <_free_r>
 8005364:	69e1      	ldr	r1, [r4, #28]
 8005366:	b111      	cbz	r1, 800536e <_reclaim_reent+0x36>
 8005368:	4620      	mov	r0, r4
 800536a:	f000 f875 	bl	8005458 <_free_r>
 800536e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005370:	b111      	cbz	r1, 8005378 <_reclaim_reent+0x40>
 8005372:	4620      	mov	r0, r4
 8005374:	f000 f870 	bl	8005458 <_free_r>
 8005378:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800537a:	b111      	cbz	r1, 8005382 <_reclaim_reent+0x4a>
 800537c:	4620      	mov	r0, r4
 800537e:	f000 f86b 	bl	8005458 <_free_r>
 8005382:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005384:	b111      	cbz	r1, 800538c <_reclaim_reent+0x54>
 8005386:	4620      	mov	r0, r4
 8005388:	f000 f866 	bl	8005458 <_free_r>
 800538c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800538e:	b111      	cbz	r1, 8005396 <_reclaim_reent+0x5e>
 8005390:	4620      	mov	r0, r4
 8005392:	f000 f861 	bl	8005458 <_free_r>
 8005396:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005398:	b111      	cbz	r1, 80053a0 <_reclaim_reent+0x68>
 800539a:	4620      	mov	r0, r4
 800539c:	f000 f85c 	bl	8005458 <_free_r>
 80053a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80053a2:	b111      	cbz	r1, 80053aa <_reclaim_reent+0x72>
 80053a4:	4620      	mov	r0, r4
 80053a6:	f000 f857 	bl	8005458 <_free_r>
 80053aa:	6a23      	ldr	r3, [r4, #32]
 80053ac:	b1b3      	cbz	r3, 80053dc <_reclaim_reent+0xa4>
 80053ae:	4620      	mov	r0, r4
 80053b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053b4:	4718      	bx	r3
 80053b6:	5949      	ldr	r1, [r1, r5]
 80053b8:	b941      	cbnz	r1, 80053cc <_reclaim_reent+0x94>
 80053ba:	3504      	adds	r5, #4
 80053bc:	69e3      	ldr	r3, [r4, #28]
 80053be:	2d80      	cmp	r5, #128	; 0x80
 80053c0:	68d9      	ldr	r1, [r3, #12]
 80053c2:	d1f8      	bne.n	80053b6 <_reclaim_reent+0x7e>
 80053c4:	4620      	mov	r0, r4
 80053c6:	f000 f847 	bl	8005458 <_free_r>
 80053ca:	e7c0      	b.n	800534e <_reclaim_reent+0x16>
 80053cc:	680e      	ldr	r6, [r1, #0]
 80053ce:	4620      	mov	r0, r4
 80053d0:	f000 f842 	bl	8005458 <_free_r>
 80053d4:	4631      	mov	r1, r6
 80053d6:	e7ef      	b.n	80053b8 <_reclaim_reent+0x80>
 80053d8:	2500      	movs	r5, #0
 80053da:	e7ef      	b.n	80053bc <_reclaim_reent+0x84>
 80053dc:	bd70      	pop	{r4, r5, r6, pc}
 80053de:	bf00      	nop
 80053e0:	2000005c 	.word	0x2000005c

080053e4 <__errno>:
 80053e4:	4b01      	ldr	r3, [pc, #4]	; (80053ec <__errno+0x8>)
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	2000005c 	.word	0x2000005c

080053f0 <__libc_init_array>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	2600      	movs	r6, #0
 80053f4:	4d0c      	ldr	r5, [pc, #48]	; (8005428 <__libc_init_array+0x38>)
 80053f6:	4c0d      	ldr	r4, [pc, #52]	; (800542c <__libc_init_array+0x3c>)
 80053f8:	1b64      	subs	r4, r4, r5
 80053fa:	10a4      	asrs	r4, r4, #2
 80053fc:	42a6      	cmp	r6, r4
 80053fe:	d109      	bne.n	8005414 <__libc_init_array+0x24>
 8005400:	f000 fc7a 	bl	8005cf8 <_init>
 8005404:	2600      	movs	r6, #0
 8005406:	4d0a      	ldr	r5, [pc, #40]	; (8005430 <__libc_init_array+0x40>)
 8005408:	4c0a      	ldr	r4, [pc, #40]	; (8005434 <__libc_init_array+0x44>)
 800540a:	1b64      	subs	r4, r4, r5
 800540c:	10a4      	asrs	r4, r4, #2
 800540e:	42a6      	cmp	r6, r4
 8005410:	d105      	bne.n	800541e <__libc_init_array+0x2e>
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	f855 3b04 	ldr.w	r3, [r5], #4
 8005418:	4798      	blx	r3
 800541a:	3601      	adds	r6, #1
 800541c:	e7ee      	b.n	80053fc <__libc_init_array+0xc>
 800541e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005422:	4798      	blx	r3
 8005424:	3601      	adds	r6, #1
 8005426:	e7f2      	b.n	800540e <__libc_init_array+0x1e>
 8005428:	08005e30 	.word	0x08005e30
 800542c:	08005e30 	.word	0x08005e30
 8005430:	08005e30 	.word	0x08005e30
 8005434:	08005e34 	.word	0x08005e34

08005438 <__retarget_lock_acquire_recursive>:
 8005438:	4770      	bx	lr

0800543a <__retarget_lock_release_recursive>:
 800543a:	4770      	bx	lr

0800543c <memcpy>:
 800543c:	440a      	add	r2, r1
 800543e:	4291      	cmp	r1, r2
 8005440:	f100 33ff 	add.w	r3, r0, #4294967295
 8005444:	d100      	bne.n	8005448 <memcpy+0xc>
 8005446:	4770      	bx	lr
 8005448:	b510      	push	{r4, lr}
 800544a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800544e:	4291      	cmp	r1, r2
 8005450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005454:	d1f9      	bne.n	800544a <memcpy+0xe>
 8005456:	bd10      	pop	{r4, pc}

08005458 <_free_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4605      	mov	r5, r0
 800545c:	2900      	cmp	r1, #0
 800545e:	d040      	beq.n	80054e2 <_free_r+0x8a>
 8005460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005464:	1f0c      	subs	r4, r1, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	bfb8      	it	lt
 800546a:	18e4      	addlt	r4, r4, r3
 800546c:	f000 f8dc 	bl	8005628 <__malloc_lock>
 8005470:	4a1c      	ldr	r2, [pc, #112]	; (80054e4 <_free_r+0x8c>)
 8005472:	6813      	ldr	r3, [r2, #0]
 8005474:	b933      	cbnz	r3, 8005484 <_free_r+0x2c>
 8005476:	6063      	str	r3, [r4, #4]
 8005478:	6014      	str	r4, [r2, #0]
 800547a:	4628      	mov	r0, r5
 800547c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005480:	f000 b8d8 	b.w	8005634 <__malloc_unlock>
 8005484:	42a3      	cmp	r3, r4
 8005486:	d908      	bls.n	800549a <_free_r+0x42>
 8005488:	6820      	ldr	r0, [r4, #0]
 800548a:	1821      	adds	r1, r4, r0
 800548c:	428b      	cmp	r3, r1
 800548e:	bf01      	itttt	eq
 8005490:	6819      	ldreq	r1, [r3, #0]
 8005492:	685b      	ldreq	r3, [r3, #4]
 8005494:	1809      	addeq	r1, r1, r0
 8005496:	6021      	streq	r1, [r4, #0]
 8005498:	e7ed      	b.n	8005476 <_free_r+0x1e>
 800549a:	461a      	mov	r2, r3
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	b10b      	cbz	r3, 80054a4 <_free_r+0x4c>
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d9fa      	bls.n	800549a <_free_r+0x42>
 80054a4:	6811      	ldr	r1, [r2, #0]
 80054a6:	1850      	adds	r0, r2, r1
 80054a8:	42a0      	cmp	r0, r4
 80054aa:	d10b      	bne.n	80054c4 <_free_r+0x6c>
 80054ac:	6820      	ldr	r0, [r4, #0]
 80054ae:	4401      	add	r1, r0
 80054b0:	1850      	adds	r0, r2, r1
 80054b2:	4283      	cmp	r3, r0
 80054b4:	6011      	str	r1, [r2, #0]
 80054b6:	d1e0      	bne.n	800547a <_free_r+0x22>
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4408      	add	r0, r1
 80054be:	6010      	str	r0, [r2, #0]
 80054c0:	6053      	str	r3, [r2, #4]
 80054c2:	e7da      	b.n	800547a <_free_r+0x22>
 80054c4:	d902      	bls.n	80054cc <_free_r+0x74>
 80054c6:	230c      	movs	r3, #12
 80054c8:	602b      	str	r3, [r5, #0]
 80054ca:	e7d6      	b.n	800547a <_free_r+0x22>
 80054cc:	6820      	ldr	r0, [r4, #0]
 80054ce:	1821      	adds	r1, r4, r0
 80054d0:	428b      	cmp	r3, r1
 80054d2:	bf01      	itttt	eq
 80054d4:	6819      	ldreq	r1, [r3, #0]
 80054d6:	685b      	ldreq	r3, [r3, #4]
 80054d8:	1809      	addeq	r1, r1, r0
 80054da:	6021      	streq	r1, [r4, #0]
 80054dc:	6063      	str	r3, [r4, #4]
 80054de:	6054      	str	r4, [r2, #4]
 80054e0:	e7cb      	b.n	800547a <_free_r+0x22>
 80054e2:	bd38      	pop	{r3, r4, r5, pc}
 80054e4:	20001424 	.word	0x20001424

080054e8 <sbrk_aligned>:
 80054e8:	b570      	push	{r4, r5, r6, lr}
 80054ea:	4e0e      	ldr	r6, [pc, #56]	; (8005524 <sbrk_aligned+0x3c>)
 80054ec:	460c      	mov	r4, r1
 80054ee:	6831      	ldr	r1, [r6, #0]
 80054f0:	4605      	mov	r5, r0
 80054f2:	b911      	cbnz	r1, 80054fa <sbrk_aligned+0x12>
 80054f4:	f000 fbaa 	bl	8005c4c <_sbrk_r>
 80054f8:	6030      	str	r0, [r6, #0]
 80054fa:	4621      	mov	r1, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 fba5 	bl	8005c4c <_sbrk_r>
 8005502:	1c43      	adds	r3, r0, #1
 8005504:	d00a      	beq.n	800551c <sbrk_aligned+0x34>
 8005506:	1cc4      	adds	r4, r0, #3
 8005508:	f024 0403 	bic.w	r4, r4, #3
 800550c:	42a0      	cmp	r0, r4
 800550e:	d007      	beq.n	8005520 <sbrk_aligned+0x38>
 8005510:	1a21      	subs	r1, r4, r0
 8005512:	4628      	mov	r0, r5
 8005514:	f000 fb9a 	bl	8005c4c <_sbrk_r>
 8005518:	3001      	adds	r0, #1
 800551a:	d101      	bne.n	8005520 <sbrk_aligned+0x38>
 800551c:	f04f 34ff 	mov.w	r4, #4294967295
 8005520:	4620      	mov	r0, r4
 8005522:	bd70      	pop	{r4, r5, r6, pc}
 8005524:	20001428 	.word	0x20001428

08005528 <_malloc_r>:
 8005528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800552c:	1ccd      	adds	r5, r1, #3
 800552e:	f025 0503 	bic.w	r5, r5, #3
 8005532:	3508      	adds	r5, #8
 8005534:	2d0c      	cmp	r5, #12
 8005536:	bf38      	it	cc
 8005538:	250c      	movcc	r5, #12
 800553a:	2d00      	cmp	r5, #0
 800553c:	4607      	mov	r7, r0
 800553e:	db01      	blt.n	8005544 <_malloc_r+0x1c>
 8005540:	42a9      	cmp	r1, r5
 8005542:	d905      	bls.n	8005550 <_malloc_r+0x28>
 8005544:	230c      	movs	r3, #12
 8005546:	2600      	movs	r6, #0
 8005548:	603b      	str	r3, [r7, #0]
 800554a:	4630      	mov	r0, r6
 800554c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005550:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005624 <_malloc_r+0xfc>
 8005554:	f000 f868 	bl	8005628 <__malloc_lock>
 8005558:	f8d8 3000 	ldr.w	r3, [r8]
 800555c:	461c      	mov	r4, r3
 800555e:	bb5c      	cbnz	r4, 80055b8 <_malloc_r+0x90>
 8005560:	4629      	mov	r1, r5
 8005562:	4638      	mov	r0, r7
 8005564:	f7ff ffc0 	bl	80054e8 <sbrk_aligned>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	4604      	mov	r4, r0
 800556c:	d155      	bne.n	800561a <_malloc_r+0xf2>
 800556e:	f8d8 4000 	ldr.w	r4, [r8]
 8005572:	4626      	mov	r6, r4
 8005574:	2e00      	cmp	r6, #0
 8005576:	d145      	bne.n	8005604 <_malloc_r+0xdc>
 8005578:	2c00      	cmp	r4, #0
 800557a:	d048      	beq.n	800560e <_malloc_r+0xe6>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	4631      	mov	r1, r6
 8005580:	4638      	mov	r0, r7
 8005582:	eb04 0903 	add.w	r9, r4, r3
 8005586:	f000 fb61 	bl	8005c4c <_sbrk_r>
 800558a:	4581      	cmp	r9, r0
 800558c:	d13f      	bne.n	800560e <_malloc_r+0xe6>
 800558e:	6821      	ldr	r1, [r4, #0]
 8005590:	4638      	mov	r0, r7
 8005592:	1a6d      	subs	r5, r5, r1
 8005594:	4629      	mov	r1, r5
 8005596:	f7ff ffa7 	bl	80054e8 <sbrk_aligned>
 800559a:	3001      	adds	r0, #1
 800559c:	d037      	beq.n	800560e <_malloc_r+0xe6>
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	442b      	add	r3, r5
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	f8d8 3000 	ldr.w	r3, [r8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d038      	beq.n	800561e <_malloc_r+0xf6>
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	42a2      	cmp	r2, r4
 80055b0:	d12b      	bne.n	800560a <_malloc_r+0xe2>
 80055b2:	2200      	movs	r2, #0
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	e00f      	b.n	80055d8 <_malloc_r+0xb0>
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	1b52      	subs	r2, r2, r5
 80055bc:	d41f      	bmi.n	80055fe <_malloc_r+0xd6>
 80055be:	2a0b      	cmp	r2, #11
 80055c0:	d917      	bls.n	80055f2 <_malloc_r+0xca>
 80055c2:	1961      	adds	r1, r4, r5
 80055c4:	42a3      	cmp	r3, r4
 80055c6:	6025      	str	r5, [r4, #0]
 80055c8:	bf18      	it	ne
 80055ca:	6059      	strne	r1, [r3, #4]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	bf08      	it	eq
 80055d0:	f8c8 1000 	streq.w	r1, [r8]
 80055d4:	5162      	str	r2, [r4, r5]
 80055d6:	604b      	str	r3, [r1, #4]
 80055d8:	4638      	mov	r0, r7
 80055da:	f104 060b 	add.w	r6, r4, #11
 80055de:	f000 f829 	bl	8005634 <__malloc_unlock>
 80055e2:	f026 0607 	bic.w	r6, r6, #7
 80055e6:	1d23      	adds	r3, r4, #4
 80055e8:	1af2      	subs	r2, r6, r3
 80055ea:	d0ae      	beq.n	800554a <_malloc_r+0x22>
 80055ec:	1b9b      	subs	r3, r3, r6
 80055ee:	50a3      	str	r3, [r4, r2]
 80055f0:	e7ab      	b.n	800554a <_malloc_r+0x22>
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	6862      	ldr	r2, [r4, #4]
 80055f6:	d1dd      	bne.n	80055b4 <_malloc_r+0x8c>
 80055f8:	f8c8 2000 	str.w	r2, [r8]
 80055fc:	e7ec      	b.n	80055d8 <_malloc_r+0xb0>
 80055fe:	4623      	mov	r3, r4
 8005600:	6864      	ldr	r4, [r4, #4]
 8005602:	e7ac      	b.n	800555e <_malloc_r+0x36>
 8005604:	4634      	mov	r4, r6
 8005606:	6876      	ldr	r6, [r6, #4]
 8005608:	e7b4      	b.n	8005574 <_malloc_r+0x4c>
 800560a:	4613      	mov	r3, r2
 800560c:	e7cc      	b.n	80055a8 <_malloc_r+0x80>
 800560e:	230c      	movs	r3, #12
 8005610:	4638      	mov	r0, r7
 8005612:	603b      	str	r3, [r7, #0]
 8005614:	f000 f80e 	bl	8005634 <__malloc_unlock>
 8005618:	e797      	b.n	800554a <_malloc_r+0x22>
 800561a:	6025      	str	r5, [r4, #0]
 800561c:	e7dc      	b.n	80055d8 <_malloc_r+0xb0>
 800561e:	605b      	str	r3, [r3, #4]
 8005620:	deff      	udf	#255	; 0xff
 8005622:	bf00      	nop
 8005624:	20001424 	.word	0x20001424

08005628 <__malloc_lock>:
 8005628:	4801      	ldr	r0, [pc, #4]	; (8005630 <__malloc_lock+0x8>)
 800562a:	f7ff bf05 	b.w	8005438 <__retarget_lock_acquire_recursive>
 800562e:	bf00      	nop
 8005630:	20001420 	.word	0x20001420

08005634 <__malloc_unlock>:
 8005634:	4801      	ldr	r0, [pc, #4]	; (800563c <__malloc_unlock+0x8>)
 8005636:	f7ff bf00 	b.w	800543a <__retarget_lock_release_recursive>
 800563a:	bf00      	nop
 800563c:	20001420 	.word	0x20001420

08005640 <__ssputs_r>:
 8005640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005644:	461f      	mov	r7, r3
 8005646:	688e      	ldr	r6, [r1, #8]
 8005648:	4682      	mov	sl, r0
 800564a:	42be      	cmp	r6, r7
 800564c:	460c      	mov	r4, r1
 800564e:	4690      	mov	r8, r2
 8005650:	680b      	ldr	r3, [r1, #0]
 8005652:	d82c      	bhi.n	80056ae <__ssputs_r+0x6e>
 8005654:	898a      	ldrh	r2, [r1, #12]
 8005656:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800565a:	d026      	beq.n	80056aa <__ssputs_r+0x6a>
 800565c:	6965      	ldr	r5, [r4, #20]
 800565e:	6909      	ldr	r1, [r1, #16]
 8005660:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005664:	eba3 0901 	sub.w	r9, r3, r1
 8005668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800566c:	1c7b      	adds	r3, r7, #1
 800566e:	444b      	add	r3, r9
 8005670:	106d      	asrs	r5, r5, #1
 8005672:	429d      	cmp	r5, r3
 8005674:	bf38      	it	cc
 8005676:	461d      	movcc	r5, r3
 8005678:	0553      	lsls	r3, r2, #21
 800567a:	d527      	bpl.n	80056cc <__ssputs_r+0x8c>
 800567c:	4629      	mov	r1, r5
 800567e:	f7ff ff53 	bl	8005528 <_malloc_r>
 8005682:	4606      	mov	r6, r0
 8005684:	b360      	cbz	r0, 80056e0 <__ssputs_r+0xa0>
 8005686:	464a      	mov	r2, r9
 8005688:	6921      	ldr	r1, [r4, #16]
 800568a:	f7ff fed7 	bl	800543c <memcpy>
 800568e:	89a3      	ldrh	r3, [r4, #12]
 8005690:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	6126      	str	r6, [r4, #16]
 800569c:	444e      	add	r6, r9
 800569e:	6026      	str	r6, [r4, #0]
 80056a0:	463e      	mov	r6, r7
 80056a2:	6165      	str	r5, [r4, #20]
 80056a4:	eba5 0509 	sub.w	r5, r5, r9
 80056a8:	60a5      	str	r5, [r4, #8]
 80056aa:	42be      	cmp	r6, r7
 80056ac:	d900      	bls.n	80056b0 <__ssputs_r+0x70>
 80056ae:	463e      	mov	r6, r7
 80056b0:	4632      	mov	r2, r6
 80056b2:	4641      	mov	r1, r8
 80056b4:	6820      	ldr	r0, [r4, #0]
 80056b6:	f000 faaf 	bl	8005c18 <memmove>
 80056ba:	2000      	movs	r0, #0
 80056bc:	68a3      	ldr	r3, [r4, #8]
 80056be:	1b9b      	subs	r3, r3, r6
 80056c0:	60a3      	str	r3, [r4, #8]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	4433      	add	r3, r6
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056cc:	462a      	mov	r2, r5
 80056ce:	f000 fadb 	bl	8005c88 <_realloc_r>
 80056d2:	4606      	mov	r6, r0
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d1e0      	bne.n	800569a <__ssputs_r+0x5a>
 80056d8:	4650      	mov	r0, sl
 80056da:	6921      	ldr	r1, [r4, #16]
 80056dc:	f7ff febc 	bl	8005458 <_free_r>
 80056e0:	230c      	movs	r3, #12
 80056e2:	f8ca 3000 	str.w	r3, [sl]
 80056e6:	89a3      	ldrh	r3, [r4, #12]
 80056e8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	e7e9      	b.n	80056c8 <__ssputs_r+0x88>

080056f4 <_svfiprintf_r>:
 80056f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f8:	4698      	mov	r8, r3
 80056fa:	898b      	ldrh	r3, [r1, #12]
 80056fc:	4607      	mov	r7, r0
 80056fe:	061b      	lsls	r3, r3, #24
 8005700:	460d      	mov	r5, r1
 8005702:	4614      	mov	r4, r2
 8005704:	b09d      	sub	sp, #116	; 0x74
 8005706:	d50e      	bpl.n	8005726 <_svfiprintf_r+0x32>
 8005708:	690b      	ldr	r3, [r1, #16]
 800570a:	b963      	cbnz	r3, 8005726 <_svfiprintf_r+0x32>
 800570c:	2140      	movs	r1, #64	; 0x40
 800570e:	f7ff ff0b 	bl	8005528 <_malloc_r>
 8005712:	6028      	str	r0, [r5, #0]
 8005714:	6128      	str	r0, [r5, #16]
 8005716:	b920      	cbnz	r0, 8005722 <_svfiprintf_r+0x2e>
 8005718:	230c      	movs	r3, #12
 800571a:	603b      	str	r3, [r7, #0]
 800571c:	f04f 30ff 	mov.w	r0, #4294967295
 8005720:	e0d0      	b.n	80058c4 <_svfiprintf_r+0x1d0>
 8005722:	2340      	movs	r3, #64	; 0x40
 8005724:	616b      	str	r3, [r5, #20]
 8005726:	2300      	movs	r3, #0
 8005728:	9309      	str	r3, [sp, #36]	; 0x24
 800572a:	2320      	movs	r3, #32
 800572c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005730:	2330      	movs	r3, #48	; 0x30
 8005732:	f04f 0901 	mov.w	r9, #1
 8005736:	f8cd 800c 	str.w	r8, [sp, #12]
 800573a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80058dc <_svfiprintf_r+0x1e8>
 800573e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005742:	4623      	mov	r3, r4
 8005744:	469a      	mov	sl, r3
 8005746:	f813 2b01 	ldrb.w	r2, [r3], #1
 800574a:	b10a      	cbz	r2, 8005750 <_svfiprintf_r+0x5c>
 800574c:	2a25      	cmp	r2, #37	; 0x25
 800574e:	d1f9      	bne.n	8005744 <_svfiprintf_r+0x50>
 8005750:	ebba 0b04 	subs.w	fp, sl, r4
 8005754:	d00b      	beq.n	800576e <_svfiprintf_r+0x7a>
 8005756:	465b      	mov	r3, fp
 8005758:	4622      	mov	r2, r4
 800575a:	4629      	mov	r1, r5
 800575c:	4638      	mov	r0, r7
 800575e:	f7ff ff6f 	bl	8005640 <__ssputs_r>
 8005762:	3001      	adds	r0, #1
 8005764:	f000 80a9 	beq.w	80058ba <_svfiprintf_r+0x1c6>
 8005768:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800576a:	445a      	add	r2, fp
 800576c:	9209      	str	r2, [sp, #36]	; 0x24
 800576e:	f89a 3000 	ldrb.w	r3, [sl]
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80a1 	beq.w	80058ba <_svfiprintf_r+0x1c6>
 8005778:	2300      	movs	r3, #0
 800577a:	f04f 32ff 	mov.w	r2, #4294967295
 800577e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005782:	f10a 0a01 	add.w	sl, sl, #1
 8005786:	9304      	str	r3, [sp, #16]
 8005788:	9307      	str	r3, [sp, #28]
 800578a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800578e:	931a      	str	r3, [sp, #104]	; 0x68
 8005790:	4654      	mov	r4, sl
 8005792:	2205      	movs	r2, #5
 8005794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005798:	4850      	ldr	r0, [pc, #320]	; (80058dc <_svfiprintf_r+0x1e8>)
 800579a:	f000 fa67 	bl	8005c6c <memchr>
 800579e:	9a04      	ldr	r2, [sp, #16]
 80057a0:	b9d8      	cbnz	r0, 80057da <_svfiprintf_r+0xe6>
 80057a2:	06d0      	lsls	r0, r2, #27
 80057a4:	bf44      	itt	mi
 80057a6:	2320      	movmi	r3, #32
 80057a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057ac:	0711      	lsls	r1, r2, #28
 80057ae:	bf44      	itt	mi
 80057b0:	232b      	movmi	r3, #43	; 0x2b
 80057b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057b6:	f89a 3000 	ldrb.w	r3, [sl]
 80057ba:	2b2a      	cmp	r3, #42	; 0x2a
 80057bc:	d015      	beq.n	80057ea <_svfiprintf_r+0xf6>
 80057be:	4654      	mov	r4, sl
 80057c0:	2000      	movs	r0, #0
 80057c2:	f04f 0c0a 	mov.w	ip, #10
 80057c6:	9a07      	ldr	r2, [sp, #28]
 80057c8:	4621      	mov	r1, r4
 80057ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057ce:	3b30      	subs	r3, #48	; 0x30
 80057d0:	2b09      	cmp	r3, #9
 80057d2:	d94d      	bls.n	8005870 <_svfiprintf_r+0x17c>
 80057d4:	b1b0      	cbz	r0, 8005804 <_svfiprintf_r+0x110>
 80057d6:	9207      	str	r2, [sp, #28]
 80057d8:	e014      	b.n	8005804 <_svfiprintf_r+0x110>
 80057da:	eba0 0308 	sub.w	r3, r0, r8
 80057de:	fa09 f303 	lsl.w	r3, r9, r3
 80057e2:	4313      	orrs	r3, r2
 80057e4:	46a2      	mov	sl, r4
 80057e6:	9304      	str	r3, [sp, #16]
 80057e8:	e7d2      	b.n	8005790 <_svfiprintf_r+0x9c>
 80057ea:	9b03      	ldr	r3, [sp, #12]
 80057ec:	1d19      	adds	r1, r3, #4
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	9103      	str	r1, [sp, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bfbb      	ittet	lt
 80057f6:	425b      	neglt	r3, r3
 80057f8:	f042 0202 	orrlt.w	r2, r2, #2
 80057fc:	9307      	strge	r3, [sp, #28]
 80057fe:	9307      	strlt	r3, [sp, #28]
 8005800:	bfb8      	it	lt
 8005802:	9204      	strlt	r2, [sp, #16]
 8005804:	7823      	ldrb	r3, [r4, #0]
 8005806:	2b2e      	cmp	r3, #46	; 0x2e
 8005808:	d10c      	bne.n	8005824 <_svfiprintf_r+0x130>
 800580a:	7863      	ldrb	r3, [r4, #1]
 800580c:	2b2a      	cmp	r3, #42	; 0x2a
 800580e:	d134      	bne.n	800587a <_svfiprintf_r+0x186>
 8005810:	9b03      	ldr	r3, [sp, #12]
 8005812:	3402      	adds	r4, #2
 8005814:	1d1a      	adds	r2, r3, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	9203      	str	r2, [sp, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	bfb8      	it	lt
 800581e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005822:	9305      	str	r3, [sp, #20]
 8005824:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80058e0 <_svfiprintf_r+0x1ec>
 8005828:	2203      	movs	r2, #3
 800582a:	4650      	mov	r0, sl
 800582c:	7821      	ldrb	r1, [r4, #0]
 800582e:	f000 fa1d 	bl	8005c6c <memchr>
 8005832:	b138      	cbz	r0, 8005844 <_svfiprintf_r+0x150>
 8005834:	2240      	movs	r2, #64	; 0x40
 8005836:	9b04      	ldr	r3, [sp, #16]
 8005838:	eba0 000a 	sub.w	r0, r0, sl
 800583c:	4082      	lsls	r2, r0
 800583e:	4313      	orrs	r3, r2
 8005840:	3401      	adds	r4, #1
 8005842:	9304      	str	r3, [sp, #16]
 8005844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005848:	2206      	movs	r2, #6
 800584a:	4826      	ldr	r0, [pc, #152]	; (80058e4 <_svfiprintf_r+0x1f0>)
 800584c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005850:	f000 fa0c 	bl	8005c6c <memchr>
 8005854:	2800      	cmp	r0, #0
 8005856:	d038      	beq.n	80058ca <_svfiprintf_r+0x1d6>
 8005858:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <_svfiprintf_r+0x1f4>)
 800585a:	bb1b      	cbnz	r3, 80058a4 <_svfiprintf_r+0x1b0>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	3307      	adds	r3, #7
 8005860:	f023 0307 	bic.w	r3, r3, #7
 8005864:	3308      	adds	r3, #8
 8005866:	9303      	str	r3, [sp, #12]
 8005868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800586a:	4433      	add	r3, r6
 800586c:	9309      	str	r3, [sp, #36]	; 0x24
 800586e:	e768      	b.n	8005742 <_svfiprintf_r+0x4e>
 8005870:	460c      	mov	r4, r1
 8005872:	2001      	movs	r0, #1
 8005874:	fb0c 3202 	mla	r2, ip, r2, r3
 8005878:	e7a6      	b.n	80057c8 <_svfiprintf_r+0xd4>
 800587a:	2300      	movs	r3, #0
 800587c:	f04f 0c0a 	mov.w	ip, #10
 8005880:	4619      	mov	r1, r3
 8005882:	3401      	adds	r4, #1
 8005884:	9305      	str	r3, [sp, #20]
 8005886:	4620      	mov	r0, r4
 8005888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800588c:	3a30      	subs	r2, #48	; 0x30
 800588e:	2a09      	cmp	r2, #9
 8005890:	d903      	bls.n	800589a <_svfiprintf_r+0x1a6>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d0c6      	beq.n	8005824 <_svfiprintf_r+0x130>
 8005896:	9105      	str	r1, [sp, #20]
 8005898:	e7c4      	b.n	8005824 <_svfiprintf_r+0x130>
 800589a:	4604      	mov	r4, r0
 800589c:	2301      	movs	r3, #1
 800589e:	fb0c 2101 	mla	r1, ip, r1, r2
 80058a2:	e7f0      	b.n	8005886 <_svfiprintf_r+0x192>
 80058a4:	ab03      	add	r3, sp, #12
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	462a      	mov	r2, r5
 80058aa:	4638      	mov	r0, r7
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <_svfiprintf_r+0x1f8>)
 80058ae:	a904      	add	r1, sp, #16
 80058b0:	f3af 8000 	nop.w
 80058b4:	1c42      	adds	r2, r0, #1
 80058b6:	4606      	mov	r6, r0
 80058b8:	d1d6      	bne.n	8005868 <_svfiprintf_r+0x174>
 80058ba:	89ab      	ldrh	r3, [r5, #12]
 80058bc:	065b      	lsls	r3, r3, #25
 80058be:	f53f af2d 	bmi.w	800571c <_svfiprintf_r+0x28>
 80058c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058c4:	b01d      	add	sp, #116	; 0x74
 80058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ca:	ab03      	add	r3, sp, #12
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	462a      	mov	r2, r5
 80058d0:	4638      	mov	r0, r7
 80058d2:	4b06      	ldr	r3, [pc, #24]	; (80058ec <_svfiprintf_r+0x1f8>)
 80058d4:	a904      	add	r1, sp, #16
 80058d6:	f000 f87d 	bl	80059d4 <_printf_i>
 80058da:	e7eb      	b.n	80058b4 <_svfiprintf_r+0x1c0>
 80058dc:	08005dfa 	.word	0x08005dfa
 80058e0:	08005e00 	.word	0x08005e00
 80058e4:	08005e04 	.word	0x08005e04
 80058e8:	00000000 	.word	0x00000000
 80058ec:	08005641 	.word	0x08005641

080058f0 <_printf_common>:
 80058f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058f4:	4616      	mov	r6, r2
 80058f6:	4699      	mov	r9, r3
 80058f8:	688a      	ldr	r2, [r1, #8]
 80058fa:	690b      	ldr	r3, [r1, #16]
 80058fc:	4607      	mov	r7, r0
 80058fe:	4293      	cmp	r3, r2
 8005900:	bfb8      	it	lt
 8005902:	4613      	movlt	r3, r2
 8005904:	6033      	str	r3, [r6, #0]
 8005906:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800590a:	460c      	mov	r4, r1
 800590c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005910:	b10a      	cbz	r2, 8005916 <_printf_common+0x26>
 8005912:	3301      	adds	r3, #1
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	6823      	ldr	r3, [r4, #0]
 8005918:	0699      	lsls	r1, r3, #26
 800591a:	bf42      	ittt	mi
 800591c:	6833      	ldrmi	r3, [r6, #0]
 800591e:	3302      	addmi	r3, #2
 8005920:	6033      	strmi	r3, [r6, #0]
 8005922:	6825      	ldr	r5, [r4, #0]
 8005924:	f015 0506 	ands.w	r5, r5, #6
 8005928:	d106      	bne.n	8005938 <_printf_common+0x48>
 800592a:	f104 0a19 	add.w	sl, r4, #25
 800592e:	68e3      	ldr	r3, [r4, #12]
 8005930:	6832      	ldr	r2, [r6, #0]
 8005932:	1a9b      	subs	r3, r3, r2
 8005934:	42ab      	cmp	r3, r5
 8005936:	dc2b      	bgt.n	8005990 <_printf_common+0xa0>
 8005938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800593c:	1e13      	subs	r3, r2, #0
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	bf18      	it	ne
 8005942:	2301      	movne	r3, #1
 8005944:	0692      	lsls	r2, r2, #26
 8005946:	d430      	bmi.n	80059aa <_printf_common+0xba>
 8005948:	4649      	mov	r1, r9
 800594a:	4638      	mov	r0, r7
 800594c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005950:	47c0      	blx	r8
 8005952:	3001      	adds	r0, #1
 8005954:	d023      	beq.n	800599e <_printf_common+0xae>
 8005956:	6823      	ldr	r3, [r4, #0]
 8005958:	6922      	ldr	r2, [r4, #16]
 800595a:	f003 0306 	and.w	r3, r3, #6
 800595e:	2b04      	cmp	r3, #4
 8005960:	bf14      	ite	ne
 8005962:	2500      	movne	r5, #0
 8005964:	6833      	ldreq	r3, [r6, #0]
 8005966:	f04f 0600 	mov.w	r6, #0
 800596a:	bf08      	it	eq
 800596c:	68e5      	ldreq	r5, [r4, #12]
 800596e:	f104 041a 	add.w	r4, r4, #26
 8005972:	bf08      	it	eq
 8005974:	1aed      	subeq	r5, r5, r3
 8005976:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800597a:	bf08      	it	eq
 800597c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005980:	4293      	cmp	r3, r2
 8005982:	bfc4      	itt	gt
 8005984:	1a9b      	subgt	r3, r3, r2
 8005986:	18ed      	addgt	r5, r5, r3
 8005988:	42b5      	cmp	r5, r6
 800598a:	d11a      	bne.n	80059c2 <_printf_common+0xd2>
 800598c:	2000      	movs	r0, #0
 800598e:	e008      	b.n	80059a2 <_printf_common+0xb2>
 8005990:	2301      	movs	r3, #1
 8005992:	4652      	mov	r2, sl
 8005994:	4649      	mov	r1, r9
 8005996:	4638      	mov	r0, r7
 8005998:	47c0      	blx	r8
 800599a:	3001      	adds	r0, #1
 800599c:	d103      	bne.n	80059a6 <_printf_common+0xb6>
 800599e:	f04f 30ff 	mov.w	r0, #4294967295
 80059a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a6:	3501      	adds	r5, #1
 80059a8:	e7c1      	b.n	800592e <_printf_common+0x3e>
 80059aa:	2030      	movs	r0, #48	; 0x30
 80059ac:	18e1      	adds	r1, r4, r3
 80059ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80059b8:	4422      	add	r2, r4
 80059ba:	3302      	adds	r3, #2
 80059bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80059c0:	e7c2      	b.n	8005948 <_printf_common+0x58>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4622      	mov	r2, r4
 80059c6:	4649      	mov	r1, r9
 80059c8:	4638      	mov	r0, r7
 80059ca:	47c0      	blx	r8
 80059cc:	3001      	adds	r0, #1
 80059ce:	d0e6      	beq.n	800599e <_printf_common+0xae>
 80059d0:	3601      	adds	r6, #1
 80059d2:	e7d9      	b.n	8005988 <_printf_common+0x98>

080059d4 <_printf_i>:
 80059d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80059d8:	7e0f      	ldrb	r7, [r1, #24]
 80059da:	4691      	mov	r9, r2
 80059dc:	2f78      	cmp	r7, #120	; 0x78
 80059de:	4680      	mov	r8, r0
 80059e0:	460c      	mov	r4, r1
 80059e2:	469a      	mov	sl, r3
 80059e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80059ea:	d807      	bhi.n	80059fc <_printf_i+0x28>
 80059ec:	2f62      	cmp	r7, #98	; 0x62
 80059ee:	d80a      	bhi.n	8005a06 <_printf_i+0x32>
 80059f0:	2f00      	cmp	r7, #0
 80059f2:	f000 80d5 	beq.w	8005ba0 <_printf_i+0x1cc>
 80059f6:	2f58      	cmp	r7, #88	; 0x58
 80059f8:	f000 80c1 	beq.w	8005b7e <_printf_i+0x1aa>
 80059fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a04:	e03a      	b.n	8005a7c <_printf_i+0xa8>
 8005a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a0a:	2b15      	cmp	r3, #21
 8005a0c:	d8f6      	bhi.n	80059fc <_printf_i+0x28>
 8005a0e:	a101      	add	r1, pc, #4	; (adr r1, 8005a14 <_printf_i+0x40>)
 8005a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a14:	08005a6d 	.word	0x08005a6d
 8005a18:	08005a81 	.word	0x08005a81
 8005a1c:	080059fd 	.word	0x080059fd
 8005a20:	080059fd 	.word	0x080059fd
 8005a24:	080059fd 	.word	0x080059fd
 8005a28:	080059fd 	.word	0x080059fd
 8005a2c:	08005a81 	.word	0x08005a81
 8005a30:	080059fd 	.word	0x080059fd
 8005a34:	080059fd 	.word	0x080059fd
 8005a38:	080059fd 	.word	0x080059fd
 8005a3c:	080059fd 	.word	0x080059fd
 8005a40:	08005b87 	.word	0x08005b87
 8005a44:	08005aad 	.word	0x08005aad
 8005a48:	08005b41 	.word	0x08005b41
 8005a4c:	080059fd 	.word	0x080059fd
 8005a50:	080059fd 	.word	0x080059fd
 8005a54:	08005ba9 	.word	0x08005ba9
 8005a58:	080059fd 	.word	0x080059fd
 8005a5c:	08005aad 	.word	0x08005aad
 8005a60:	080059fd 	.word	0x080059fd
 8005a64:	080059fd 	.word	0x080059fd
 8005a68:	08005b49 	.word	0x08005b49
 8005a6c:	682b      	ldr	r3, [r5, #0]
 8005a6e:	1d1a      	adds	r2, r3, #4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	602a      	str	r2, [r5, #0]
 8005a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0a0      	b.n	8005bc2 <_printf_i+0x1ee>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	682b      	ldr	r3, [r5, #0]
 8005a84:	0607      	lsls	r7, r0, #24
 8005a86:	f103 0104 	add.w	r1, r3, #4
 8005a8a:	6029      	str	r1, [r5, #0]
 8005a8c:	d501      	bpl.n	8005a92 <_printf_i+0xbe>
 8005a8e:	681e      	ldr	r6, [r3, #0]
 8005a90:	e003      	b.n	8005a9a <_printf_i+0xc6>
 8005a92:	0646      	lsls	r6, r0, #25
 8005a94:	d5fb      	bpl.n	8005a8e <_printf_i+0xba>
 8005a96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005a9a:	2e00      	cmp	r6, #0
 8005a9c:	da03      	bge.n	8005aa6 <_printf_i+0xd2>
 8005a9e:	232d      	movs	r3, #45	; 0x2d
 8005aa0:	4276      	negs	r6, r6
 8005aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aa6:	230a      	movs	r3, #10
 8005aa8:	4859      	ldr	r0, [pc, #356]	; (8005c10 <_printf_i+0x23c>)
 8005aaa:	e012      	b.n	8005ad2 <_printf_i+0xfe>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	6820      	ldr	r0, [r4, #0]
 8005ab0:	1d19      	adds	r1, r3, #4
 8005ab2:	6029      	str	r1, [r5, #0]
 8005ab4:	0605      	lsls	r5, r0, #24
 8005ab6:	d501      	bpl.n	8005abc <_printf_i+0xe8>
 8005ab8:	681e      	ldr	r6, [r3, #0]
 8005aba:	e002      	b.n	8005ac2 <_printf_i+0xee>
 8005abc:	0641      	lsls	r1, r0, #25
 8005abe:	d5fb      	bpl.n	8005ab8 <_printf_i+0xe4>
 8005ac0:	881e      	ldrh	r6, [r3, #0]
 8005ac2:	2f6f      	cmp	r7, #111	; 0x6f
 8005ac4:	bf0c      	ite	eq
 8005ac6:	2308      	moveq	r3, #8
 8005ac8:	230a      	movne	r3, #10
 8005aca:	4851      	ldr	r0, [pc, #324]	; (8005c10 <_printf_i+0x23c>)
 8005acc:	2100      	movs	r1, #0
 8005ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ad2:	6865      	ldr	r5, [r4, #4]
 8005ad4:	2d00      	cmp	r5, #0
 8005ad6:	bfa8      	it	ge
 8005ad8:	6821      	ldrge	r1, [r4, #0]
 8005ada:	60a5      	str	r5, [r4, #8]
 8005adc:	bfa4      	itt	ge
 8005ade:	f021 0104 	bicge.w	r1, r1, #4
 8005ae2:	6021      	strge	r1, [r4, #0]
 8005ae4:	b90e      	cbnz	r6, 8005aea <_printf_i+0x116>
 8005ae6:	2d00      	cmp	r5, #0
 8005ae8:	d04b      	beq.n	8005b82 <_printf_i+0x1ae>
 8005aea:	4615      	mov	r5, r2
 8005aec:	fbb6 f1f3 	udiv	r1, r6, r3
 8005af0:	fb03 6711 	mls	r7, r3, r1, r6
 8005af4:	5dc7      	ldrb	r7, [r0, r7]
 8005af6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005afa:	4637      	mov	r7, r6
 8005afc:	42bb      	cmp	r3, r7
 8005afe:	460e      	mov	r6, r1
 8005b00:	d9f4      	bls.n	8005aec <_printf_i+0x118>
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d10b      	bne.n	8005b1e <_printf_i+0x14a>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	07de      	lsls	r6, r3, #31
 8005b0a:	d508      	bpl.n	8005b1e <_printf_i+0x14a>
 8005b0c:	6923      	ldr	r3, [r4, #16]
 8005b0e:	6861      	ldr	r1, [r4, #4]
 8005b10:	4299      	cmp	r1, r3
 8005b12:	bfde      	ittt	le
 8005b14:	2330      	movle	r3, #48	; 0x30
 8005b16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b1e:	1b52      	subs	r2, r2, r5
 8005b20:	6122      	str	r2, [r4, #16]
 8005b22:	464b      	mov	r3, r9
 8005b24:	4621      	mov	r1, r4
 8005b26:	4640      	mov	r0, r8
 8005b28:	f8cd a000 	str.w	sl, [sp]
 8005b2c:	aa03      	add	r2, sp, #12
 8005b2e:	f7ff fedf 	bl	80058f0 <_printf_common>
 8005b32:	3001      	adds	r0, #1
 8005b34:	d14a      	bne.n	8005bcc <_printf_i+0x1f8>
 8005b36:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3a:	b004      	add	sp, #16
 8005b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	f043 0320 	orr.w	r3, r3, #32
 8005b46:	6023      	str	r3, [r4, #0]
 8005b48:	2778      	movs	r7, #120	; 0x78
 8005b4a:	4832      	ldr	r0, [pc, #200]	; (8005c14 <_printf_i+0x240>)
 8005b4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	6829      	ldr	r1, [r5, #0]
 8005b54:	061f      	lsls	r7, r3, #24
 8005b56:	f851 6b04 	ldr.w	r6, [r1], #4
 8005b5a:	d402      	bmi.n	8005b62 <_printf_i+0x18e>
 8005b5c:	065f      	lsls	r7, r3, #25
 8005b5e:	bf48      	it	mi
 8005b60:	b2b6      	uxthmi	r6, r6
 8005b62:	07df      	lsls	r7, r3, #31
 8005b64:	bf48      	it	mi
 8005b66:	f043 0320 	orrmi.w	r3, r3, #32
 8005b6a:	6029      	str	r1, [r5, #0]
 8005b6c:	bf48      	it	mi
 8005b6e:	6023      	strmi	r3, [r4, #0]
 8005b70:	b91e      	cbnz	r6, 8005b7a <_printf_i+0x1a6>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	f023 0320 	bic.w	r3, r3, #32
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	2310      	movs	r3, #16
 8005b7c:	e7a6      	b.n	8005acc <_printf_i+0xf8>
 8005b7e:	4824      	ldr	r0, [pc, #144]	; (8005c10 <_printf_i+0x23c>)
 8005b80:	e7e4      	b.n	8005b4c <_printf_i+0x178>
 8005b82:	4615      	mov	r5, r2
 8005b84:	e7bd      	b.n	8005b02 <_printf_i+0x12e>
 8005b86:	682b      	ldr	r3, [r5, #0]
 8005b88:	6826      	ldr	r6, [r4, #0]
 8005b8a:	1d18      	adds	r0, r3, #4
 8005b8c:	6961      	ldr	r1, [r4, #20]
 8005b8e:	6028      	str	r0, [r5, #0]
 8005b90:	0635      	lsls	r5, r6, #24
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	d501      	bpl.n	8005b9a <_printf_i+0x1c6>
 8005b96:	6019      	str	r1, [r3, #0]
 8005b98:	e002      	b.n	8005ba0 <_printf_i+0x1cc>
 8005b9a:	0670      	lsls	r0, r6, #25
 8005b9c:	d5fb      	bpl.n	8005b96 <_printf_i+0x1c2>
 8005b9e:	8019      	strh	r1, [r3, #0]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	4615      	mov	r5, r2
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	e7bc      	b.n	8005b22 <_printf_i+0x14e>
 8005ba8:	682b      	ldr	r3, [r5, #0]
 8005baa:	2100      	movs	r1, #0
 8005bac:	1d1a      	adds	r2, r3, #4
 8005bae:	602a      	str	r2, [r5, #0]
 8005bb0:	681d      	ldr	r5, [r3, #0]
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	4628      	mov	r0, r5
 8005bb6:	f000 f859 	bl	8005c6c <memchr>
 8005bba:	b108      	cbz	r0, 8005bc0 <_printf_i+0x1ec>
 8005bbc:	1b40      	subs	r0, r0, r5
 8005bbe:	6060      	str	r0, [r4, #4]
 8005bc0:	6863      	ldr	r3, [r4, #4]
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bca:	e7aa      	b.n	8005b22 <_printf_i+0x14e>
 8005bcc:	462a      	mov	r2, r5
 8005bce:	4649      	mov	r1, r9
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	6923      	ldr	r3, [r4, #16]
 8005bd4:	47d0      	blx	sl
 8005bd6:	3001      	adds	r0, #1
 8005bd8:	d0ad      	beq.n	8005b36 <_printf_i+0x162>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	079b      	lsls	r3, r3, #30
 8005bde:	d413      	bmi.n	8005c08 <_printf_i+0x234>
 8005be0:	68e0      	ldr	r0, [r4, #12]
 8005be2:	9b03      	ldr	r3, [sp, #12]
 8005be4:	4298      	cmp	r0, r3
 8005be6:	bfb8      	it	lt
 8005be8:	4618      	movlt	r0, r3
 8005bea:	e7a6      	b.n	8005b3a <_printf_i+0x166>
 8005bec:	2301      	movs	r3, #1
 8005bee:	4632      	mov	r2, r6
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	4640      	mov	r0, r8
 8005bf4:	47d0      	blx	sl
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d09d      	beq.n	8005b36 <_printf_i+0x162>
 8005bfa:	3501      	adds	r5, #1
 8005bfc:	68e3      	ldr	r3, [r4, #12]
 8005bfe:	9903      	ldr	r1, [sp, #12]
 8005c00:	1a5b      	subs	r3, r3, r1
 8005c02:	42ab      	cmp	r3, r5
 8005c04:	dcf2      	bgt.n	8005bec <_printf_i+0x218>
 8005c06:	e7eb      	b.n	8005be0 <_printf_i+0x20c>
 8005c08:	2500      	movs	r5, #0
 8005c0a:	f104 0619 	add.w	r6, r4, #25
 8005c0e:	e7f5      	b.n	8005bfc <_printf_i+0x228>
 8005c10:	08005e0b 	.word	0x08005e0b
 8005c14:	08005e1c 	.word	0x08005e1c

08005c18 <memmove>:
 8005c18:	4288      	cmp	r0, r1
 8005c1a:	b510      	push	{r4, lr}
 8005c1c:	eb01 0402 	add.w	r4, r1, r2
 8005c20:	d902      	bls.n	8005c28 <memmove+0x10>
 8005c22:	4284      	cmp	r4, r0
 8005c24:	4623      	mov	r3, r4
 8005c26:	d807      	bhi.n	8005c38 <memmove+0x20>
 8005c28:	1e43      	subs	r3, r0, #1
 8005c2a:	42a1      	cmp	r1, r4
 8005c2c:	d008      	beq.n	8005c40 <memmove+0x28>
 8005c2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c36:	e7f8      	b.n	8005c2a <memmove+0x12>
 8005c38:	4601      	mov	r1, r0
 8005c3a:	4402      	add	r2, r0
 8005c3c:	428a      	cmp	r2, r1
 8005c3e:	d100      	bne.n	8005c42 <memmove+0x2a>
 8005c40:	bd10      	pop	{r4, pc}
 8005c42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c4a:	e7f7      	b.n	8005c3c <memmove+0x24>

08005c4c <_sbrk_r>:
 8005c4c:	b538      	push	{r3, r4, r5, lr}
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4d05      	ldr	r5, [pc, #20]	; (8005c68 <_sbrk_r+0x1c>)
 8005c52:	4604      	mov	r4, r0
 8005c54:	4608      	mov	r0, r1
 8005c56:	602b      	str	r3, [r5, #0]
 8005c58:	f7fa ff40 	bl	8000adc <_sbrk>
 8005c5c:	1c43      	adds	r3, r0, #1
 8005c5e:	d102      	bne.n	8005c66 <_sbrk_r+0x1a>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	b103      	cbz	r3, 8005c66 <_sbrk_r+0x1a>
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	bd38      	pop	{r3, r4, r5, pc}
 8005c68:	2000141c 	.word	0x2000141c

08005c6c <memchr>:
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	b510      	push	{r4, lr}
 8005c70:	b2c9      	uxtb	r1, r1
 8005c72:	4402      	add	r2, r0
 8005c74:	4293      	cmp	r3, r2
 8005c76:	4618      	mov	r0, r3
 8005c78:	d101      	bne.n	8005c7e <memchr+0x12>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e003      	b.n	8005c86 <memchr+0x1a>
 8005c7e:	7804      	ldrb	r4, [r0, #0]
 8005c80:	3301      	adds	r3, #1
 8005c82:	428c      	cmp	r4, r1
 8005c84:	d1f6      	bne.n	8005c74 <memchr+0x8>
 8005c86:	bd10      	pop	{r4, pc}

08005c88 <_realloc_r>:
 8005c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	4614      	mov	r4, r2
 8005c90:	460e      	mov	r6, r1
 8005c92:	b921      	cbnz	r1, 8005c9e <_realloc_r+0x16>
 8005c94:	4611      	mov	r1, r2
 8005c96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9a:	f7ff bc45 	b.w	8005528 <_malloc_r>
 8005c9e:	b92a      	cbnz	r2, 8005cac <_realloc_r+0x24>
 8005ca0:	f7ff fbda 	bl	8005458 <_free_r>
 8005ca4:	4625      	mov	r5, r4
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cac:	f000 f81b 	bl	8005ce6 <_malloc_usable_size_r>
 8005cb0:	4284      	cmp	r4, r0
 8005cb2:	4607      	mov	r7, r0
 8005cb4:	d802      	bhi.n	8005cbc <_realloc_r+0x34>
 8005cb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cba:	d812      	bhi.n	8005ce2 <_realloc_r+0x5a>
 8005cbc:	4621      	mov	r1, r4
 8005cbe:	4640      	mov	r0, r8
 8005cc0:	f7ff fc32 	bl	8005528 <_malloc_r>
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	d0ed      	beq.n	8005ca6 <_realloc_r+0x1e>
 8005cca:	42bc      	cmp	r4, r7
 8005ccc:	4622      	mov	r2, r4
 8005cce:	4631      	mov	r1, r6
 8005cd0:	bf28      	it	cs
 8005cd2:	463a      	movcs	r2, r7
 8005cd4:	f7ff fbb2 	bl	800543c <memcpy>
 8005cd8:	4631      	mov	r1, r6
 8005cda:	4640      	mov	r0, r8
 8005cdc:	f7ff fbbc 	bl	8005458 <_free_r>
 8005ce0:	e7e1      	b.n	8005ca6 <_realloc_r+0x1e>
 8005ce2:	4635      	mov	r5, r6
 8005ce4:	e7df      	b.n	8005ca6 <_realloc_r+0x1e>

08005ce6 <_malloc_usable_size_r>:
 8005ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cea:	1f18      	subs	r0, r3, #4
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bfbc      	itt	lt
 8005cf0:	580b      	ldrlt	r3, [r1, r0]
 8005cf2:	18c0      	addlt	r0, r0, r3
 8005cf4:	4770      	bx	lr
	...

08005cf8 <_init>:
 8005cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cfa:	bf00      	nop
 8005cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cfe:	bc08      	pop	{r3}
 8005d00:	469e      	mov	lr, r3
 8005d02:	4770      	bx	lr

08005d04 <_fini>:
 8005d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d06:	bf00      	nop
 8005d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d0a:	bc08      	pop	{r3}
 8005d0c:	469e      	mov	lr, r3
 8005d0e:	4770      	bx	lr
